{
  "version": 3,
  "sources": ["../../use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js", "../../use-sync-external-store/shim/with-selector.js", "../../tiny-invariant/dist/esm/tiny-invariant.js", "../../tiny-warning/dist/tiny-warning.esm.js", "../../@tanstack/store/src/index.ts", "../../@tanstack/react-store/src/index.tsx", "../../@tanstack/router/src/history.ts", "../../@tanstack/router/src/utils.ts", "../../@tanstack/router/src/path.ts", "../../@tanstack/router/src/qss.ts", "../../@tanstack/router/src/react.tsx", "../../@tanstack/router/src/route.ts", "../../@tanstack/router/src/searchParams.ts", "../../@tanstack/router/src/router.ts", "../../@tanstack/router/src/routeMatch.ts"],
  "sourcesContent": ["/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\nvar shim = require('use-sync-external-store/shim');\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar useSyncExternalStore = shim.useSyncExternalStore;\n\n// for CommonJS interop.\n\nvar useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n  // Use this to track the rendered snapshot.\n  var instRef = useRef(null);\n  var inst;\n\n  if (instRef.current === null) {\n    inst = {\n      hasValue: false,\n      value: null\n    };\n    instRef.current = inst;\n  } else {\n    inst = instRef.current;\n  }\n\n  var _useMemo = useMemo(function () {\n    // Track the memoized state using closure variables that are local to this\n    // memoized instance of a getSnapshot function. Intentionally not using a\n    // useRef hook, because that state would be shared across all concurrent\n    // copies of the hook/component.\n    var hasMemo = false;\n    var memoizedSnapshot;\n    var memoizedSelection;\n\n    var memoizedSelector = function (nextSnapshot) {\n      if (!hasMemo) {\n        // The first time the hook is called, there is no memoized result.\n        hasMemo = true;\n        memoizedSnapshot = nextSnapshot;\n\n        var _nextSelection = selector(nextSnapshot);\n\n        if (isEqual !== undefined) {\n          // Even if the selector has changed, the currently rendered selection\n          // may be equal to the new selection. We should attempt to reuse the\n          // current value if possible, to preserve downstream memoizations.\n          if (inst.hasValue) {\n            var currentSelection = inst.value;\n\n            if (isEqual(currentSelection, _nextSelection)) {\n              memoizedSelection = currentSelection;\n              return currentSelection;\n            }\n          }\n        }\n\n        memoizedSelection = _nextSelection;\n        return _nextSelection;\n      } // We may be able to reuse the previous invocation's result.\n\n\n      // We may be able to reuse the previous invocation's result.\n      var prevSnapshot = memoizedSnapshot;\n      var prevSelection = memoizedSelection;\n\n      if (objectIs(prevSnapshot, nextSnapshot)) {\n        // The snapshot is the same as last time. Reuse the previous selection.\n        return prevSelection;\n      } // The snapshot has changed, so we need to compute a new selection.\n\n\n      // The snapshot has changed, so we need to compute a new selection.\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n\n      // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n        return prevSelection;\n      }\n\n      memoizedSnapshot = nextSnapshot;\n      memoizedSelection = nextSelection;\n      return nextSelection;\n    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n    // Assigning this to a constant so that Flow knows it can't change.\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n    var getSnapshotWithSelector = function () {\n      return memoizedSelector(getSnapshot());\n    };\n\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n      return memoizedSelector(maybeGetServerSnapshot());\n    };\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n      getSelection = _useMemo[0],\n      getServerSelection = _useMemo[1];\n\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n  useEffect(function () {\n    inst.hasValue = true;\n    inst.value = value;\n  }, [value]);\n  useDebugValue(value);\n  return value;\n}\n\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\n}\n", "var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n", "export type AnyUpdater = (...args: any[]) => any\n\nexport type Listener = () => void\n\ninterface StoreOptions<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  updateFn?: (previous: TState) => (updater: TUpdater) => TState\n  onSubscribe?: (\n    listener: Listener,\n    store: Store<TState, TUpdater>,\n  ) => () => void\n  onUpdate?: () => void\n}\n\nexport class Store<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  listeners = new Set<Listener>()\n  state: TState\n  options?: StoreOptions<TState, TUpdater>\n  _batching = false\n  _flushing = 0\n\n  constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>) {\n    this.state = initialState\n    this.options = options\n  }\n\n  subscribe = (listener: Listener) => {\n    this.listeners.add(listener)\n    const unsub = this.options?.onSubscribe?.(listener, this)\n    return () => {\n      this.listeners.delete(listener)\n      unsub?.()\n    }\n  }\n\n  setState = (updater: TUpdater) => {\n    const previous = this.state\n    this.state = this.options?.updateFn\n      ? this.options.updateFn(previous)(updater)\n      : (updater as any)(previous)\n\n    // Always run onUpdate, regardless of batching\n    this.options?.onUpdate?.()\n\n    // Attempt to flush\n    this._flush()\n  }\n\n  _flush = () => {\n    if (this._batching) return\n    const flushId = ++this._flushing\n    this.listeners.forEach((listener) => {\n      if (this._flushing !== flushId) return\n      listener()\n    })\n  }\n\n  batch = (cb: () => void) => {\n    if (this._batching) return cb()\n    this._batching = true\n    cb()\n    this._batching = false\n    this._flush()\n  }\n}\n", "import * as React from 'react'\nimport { AnyUpdater, Store } from '@tanstack/store'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector'\n\nexport * from '@tanstack/store'\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport function useStore<\n  TState,\n  TSelected = NoInfer<TState>,\n  TUpdater extends AnyUpdater = AnyUpdater,\n>(\n  store: Store<TState, TUpdater>,\n  selector: (state: NoInfer<TState>) => TSelected = (d) => d as any,\n) {\n  // const isMountedRef = React.useRef(false)\n  // const [state, setState] = React.useState<{ ref: TSelected }>({\n  //   ref: undefined!,\n  // })\n\n  const slice = useSyncExternalStoreWithSelector(\n    store.subscribe,\n    () => store.state,\n    () => store.state,\n    selector,\n    shallow,\n  )\n\n  // if (!isMountedRef.current) {\n  //   state.ref = slice\n  // }\n\n  // if (slice !== state.ref) {\n  //   setState({ ref: slice })\n  // }\n\n  // React.useEffect(() => {\n  //   isMountedRef.current = true\n  //   return () => {\n  //     isMountedRef.current = false\n  //   }\n  // }, [])\n\n  // return state.ref\n\n  return slice\n}\n\nexport function shallow<T>(objA: T, objB: T) {\n  if (Object.is(objA, objB)) {\n    return true\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false\n  }\n\n  const keysA = Object.keys(objA)\n  if (keysA.length !== Object.keys(objB).length) {\n    return false\n  }\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||\n      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n", "// While the public API was clearly inspired by the \"history\" npm package,\n// This implementation attempts to be more lightweight by\n// making assumptions about the way TanStack Router works\n\nexport interface RouterHistory {\n  location: RouterLocation\n  listen: (cb: () => void) => () => void\n  push: (path: string, state?: any) => void\n  replace: (path: string, state?: any) => void\n  go: (index: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (href: string) => string\n  block: (blockerFn: BlockerFn) => () => void\n}\n\nexport interface ParsedPath {\n  href: string\n  pathname: string\n  search: string\n  hash: string\n}\n\nexport interface RouterLocation extends ParsedPath {\n  state: any\n}\n\ntype BlockerFn = (retry: () => void, cancel: () => void) => void\n\nconst popStateEvent = 'popstate'\nconst beforeUnloadEvent = 'beforeunload'\n\nconst beforeUnloadListener = (event: Event) => {\n  event.preventDefault()\n  // @ts-ignore\n  return (event.returnValue = '')\n}\n\nconst stopBlocking = () => {\n  removeEventListener(beforeUnloadEvent, beforeUnloadListener, {\n    capture: true,\n  })\n}\n\nfunction createHistory(opts: {\n  getLocation: () => RouterLocation\n  listener: (onUpdate: () => void) => () => void\n  pushState: (path: string, state: any) => void\n  replaceState: (path: string, state: any) => void\n  go: (n: number) => void\n  back: () => void\n  forward: () => void\n  createHref: (path: string) => string\n}): RouterHistory {\n  let location = opts.getLocation()\n  let unsub = () => {}\n  let listeners = new Set<() => void>()\n  let blockers: BlockerFn[] = []\n  let queue: (() => void)[] = []\n\n  const tryFlush = () => {\n    if (blockers.length) {\n      blockers[0]?.(tryFlush, () => {\n        blockers = []\n        stopBlocking()\n      })\n      return\n    }\n\n    while (queue.length) {\n      queue.shift()?.()\n    }\n\n    onUpdate()\n  }\n\n  const queueTask = (task: () => void) => {\n    queue.push(task)\n    tryFlush()\n  }\n\n  const onUpdate = () => {\n    location = opts.getLocation()\n    listeners.forEach((listener) => listener())\n  }\n\n  return {\n    get location() {\n      return location\n    },\n    listen: (cb: () => void) => {\n      if (listeners.size === 0) {\n        unsub = opts.listener(onUpdate)\n      }\n      listeners.add(cb)\n\n      return () => {\n        listeners.delete(cb)\n        if (listeners.size === 0) {\n          unsub()\n        }\n      }\n    },\n    push: (path: string, state: any) => {\n      queueTask(() => {\n        opts.pushState(path, state)\n      })\n    },\n    replace: (path: string, state: any) => {\n      queueTask(() => {\n        opts.replaceState(path, state)\n      })\n    },\n    go: (index) => {\n      queueTask(() => {\n        opts.go(index)\n      })\n    },\n    back: () => {\n      queueTask(() => {\n        opts.back()\n      })\n    },\n    forward: () => {\n      queueTask(() => {\n        opts.forward()\n      })\n    },\n    createHref: (str) => opts.createHref(str),\n    block: (cb) => {\n      blockers.push(cb)\n\n      if (blockers.length === 1) {\n        addEventListener(beforeUnloadEvent, beforeUnloadListener, {\n          capture: true,\n        })\n      }\n\n      return () => {\n        blockers = blockers.filter((b) => b !== cb)\n\n        if (!blockers.length) {\n          stopBlocking()\n        }\n      }\n    },\n  }\n}\n\nexport function createBrowserHistory(opts?: {\n  getHref?: () => string\n  createHref?: (path: string) => string\n}): RouterHistory {\n  const getHref =\n    opts?.getHref ??\n    (() =>\n      `${window.location.pathname}${window.location.search}${window.location.hash}`)\n  const createHref = opts?.createHref ?? ((path) => path)\n  const getLocation = () => parseLocation(getHref(), history.state)\n\n  return createHistory({\n    getLocation,\n    listener: (onUpdate) => {\n      window.addEventListener(popStateEvent, onUpdate)\n      return () => {\n        window.removeEventListener(popStateEvent, onUpdate)\n      }\n    },\n    pushState: (path, state) => {\n      window.history.pushState(\n        { ...state, key: createRandomKey() },\n        '',\n        createHref(path),\n      )\n    },\n    replaceState: (path, state) => {\n      window.history.replaceState(\n        { ...state, key: createRandomKey() },\n        '',\n        createHref(path),\n      )\n    },\n    back: () => window.history.back(),\n    forward: () => window.history.forward(),\n    go: (n) => window.history.go(n),\n    createHref: (path) => createHref(path),\n  })\n}\n\nexport function createHashHistory(): RouterHistory {\n  return createBrowserHistory({\n    getHref: () => window.location.hash.substring(1),\n    createHref: (path) => `#${path}`,\n  })\n}\n\nexport function createMemoryHistory(\n  opts: {\n    initialEntries: string[]\n    initialIndex?: number\n  } = {\n    initialEntries: ['/'],\n  },\n): RouterHistory {\n  const entries = opts.initialEntries\n  let index = opts.initialIndex ?? entries.length - 1\n  let currentState = {}\n\n  const getLocation = () => parseLocation(entries[index]!, currentState)\n\n  return createHistory({\n    getLocation,\n    listener: () => {\n      return () => {}\n    },\n    pushState: (path, state) => {\n      currentState = {\n        ...state,\n        key: createRandomKey(),\n      }\n      entries.push(path)\n      index++\n    },\n    replaceState: (path, state) => {\n      currentState = {\n        ...state,\n        key: createRandomKey(),\n      }\n      entries[index] = path\n    },\n    back: () => {\n      index--\n    },\n    forward: () => {\n      index = Math.min(index + 1, entries.length - 1)\n    },\n    go: (n) => window.history.go(n),\n    createHref: (path) => path,\n  })\n}\n\nfunction parseLocation(href: string, state: any): RouterLocation {\n  let hashIndex = href.indexOf('#')\n  let searchIndex = href.indexOf('?')\n\n  return {\n    href,\n    pathname: href.substring(\n      0,\n      hashIndex > 0\n        ? searchIndex > 0\n          ? Math.min(hashIndex, searchIndex)\n          : hashIndex\n        : searchIndex > 0\n        ? searchIndex\n        : href.length,\n    ),\n    hash: hashIndex > -1 ? href.substring(hashIndex) : '',\n    search:\n      searchIndex > -1\n        ? href.slice(searchIndex, hashIndex === -1 ? undefined : hashIndex)\n        : '',\n    state,\n  }\n}\n\n// Thanks co-pilot!\nfunction createRandomKey() {\n  return (Math.random() + 1).toString(36).substring(7)\n}\n", "export type NoInfer<T> = [T][T extends any ? 0 : never]\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsAnyBoolean<T> = 1 extends 0 & T ? true : false\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\nexport type PickAsRequired<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type PickAsPartial<T, K extends keyof T> = Omit<T, K> &\n  Partial<Pick<T, K>>\nexport type PickUnsafe<T, K> = K extends keyof T ? Pick<T, K> : never\nexport type PickExtra<T, K> = {\n  [TKey in keyof K as string extends TKey\n    ? never\n    : TKey extends keyof T\n    ? never\n    : TKey]: K[TKey]\n}\n\nexport type PickRequired<T> = {\n  [K in keyof T as undefined extends T[K] ? never : K]: T[K]\n}\n\nexport type Expand<T> = T extends object\n  ? T extends infer O\n    ? { [K in keyof O]: O[K] }\n    : never\n  : T\n\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => any\n  ? I\n  : never\n\ntype Compute<T> = { [K in keyof T]: T[K] } | never\n\ntype AllKeys<T> = T extends any ? keyof T : never\n\nexport type MergeUnion<T, Keys extends keyof T = keyof T> = Compute<\n  {\n    [K in Keys]: T[Keys]\n  } & {\n    [K in AllKeys<T>]?: T extends any\n      ? K extends keyof T\n        ? T[K]\n        : never\n      : never\n  }\n>\n\nexport type Values<O> = O[ValueKeys<O>]\nexport type ValueKeys<O> = Extract<keyof O, PropertyKey>\n\nexport type DeepAwaited<T> = T extends Promise<infer A>\n  ? DeepAwaited<A>\n  : T extends Record<infer A, Promise<infer B>>\n  ? { [K in A]: DeepAwaited<B> }\n  : T\n\nexport type PathParamMask<TRoutePath extends string> =\n  TRoutePath extends `${infer L}/$${infer C}/${infer R}`\n    ? PathParamMask<`${L}/${string}/${R}`>\n    : TRoutePath extends `${infer L}/$${infer C}`\n    ? PathParamMask<`${L}/${string}`>\n    : TRoutePath\n\nexport type Timeout = ReturnType<typeof setTimeout>\n\nexport type Updater<TPrevious, TResult = TPrevious> =\n  | TResult\n  | ((prev?: TPrevious) => TResult)\n\nexport type PickExtract<T, U> = {\n  [K in keyof T as T[K] extends U ? K : never]: T[K]\n}\n\nexport type PickExclude<T, U> = {\n  [K in keyof T as T[K] extends U ? never : K]: T[K]\n}\n\nexport function last<T>(arr: T[]) {\n  return arr[arr.length - 1]\n}\n\nfunction isFunction(d: any): d is Function {\n  return typeof d === 'function'\n}\n\nexport function functionalUpdate<TResult>(\n  updater: Updater<TResult>,\n  previous: TResult,\n) {\n  if (isFunction(updater)) {\n    return updater(previous as TResult)\n  }\n\n  return updater\n}\n\nexport function pick<T, K extends keyof T>(parent: T, keys: K[]): Pick<T, K> {\n  return keys.reduce((obj: any, key: K) => {\n    obj[key] = parent[key]\n    return obj\n  }, {} as any)\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between immutable JSON values for example.\n * Do not use this with signals\n */\nexport function replaceEqualDeep<T>(prev: any, _next: T): T {\n  if (prev === _next) {\n    return prev\n  }\n\n  const next = _next as any\n\n  const array = Array.isArray(prev) && Array.isArray(next)\n\n  if (array || (isPlainObject(prev) && isPlainObject(next))) {\n    const prevSize = array ? prev.length : Object.keys(prev).length\n    const nextItems = array ? next : Object.keys(next)\n    const nextSize = nextItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < nextSize; i++) {\n      const key = array ? i : nextItems[i]\n      copy[key] = replaceEqualDeep(prev[key], next[key])\n      if (copy[key] === prev[key]) {\n        equalItems++\n      }\n    }\n\n    return prevSize === nextSize && equalItems === prevSize ? prev : copy\n  }\n\n  return next\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any) {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any) {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (isPlainObject(a) && isPlainObject(b)) {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every((item, index) => partialDeepEqual(item, b[index]))\n    )\n  }\n\n  return false\n}\n", "import { AnyPathParams } from './route'\nimport { MatchLocation } from './router'\nimport { last } from './utils'\n\nexport interface Segment {\n  type: 'pathname' | 'param' | 'wildcard'\n  value: string\n}\n\nexport function joinPaths(paths: (string | undefined)[]) {\n  return cleanPath(paths.filter(Boolean).join('/'))\n}\n\nexport function cleanPath(path: string) {\n  // remove double slashes\n  return path.replace(/\\/{2,}/g, '/')\n}\n\nexport function trimPathLeft(path: string) {\n  return path === '/' ? path : path.replace(/^\\/{1,}/, '')\n}\n\nexport function trimPathRight(path: string) {\n  return path === '/' ? path : path.replace(/\\/{1,}$/, '')\n}\n\nexport function trimPath(path: string) {\n  return trimPathRight(trimPathLeft(path))\n}\n\nexport function resolvePath(basepath: string, base: string, to: string) {\n  base = base.replace(new RegExp(`^${basepath}`), '/')\n  to = to.replace(new RegExp(`^${basepath}`), '/')\n\n  let baseSegments = parsePathname(base)\n  const toSegments = parsePathname(to)\n\n  toSegments.forEach((toSegment, index) => {\n    if (toSegment.value === '/') {\n      if (!index) {\n        // Leading slash\n        baseSegments = [toSegment]\n      } else if (index === toSegments.length - 1) {\n        // Trailing Slash\n        baseSegments.push(toSegment)\n      } else {\n        // ignore inter-slashes\n      }\n    } else if (toSegment.value === '..') {\n      // Extra trailing slash? pop it off\n      if (baseSegments.length > 1 && last(baseSegments)?.value === '/') {\n        baseSegments.pop()\n      }\n      baseSegments.pop()\n    } else if (toSegment.value === '.') {\n      return\n    } else {\n      baseSegments.push(toSegment)\n    }\n  })\n\n  const joined = joinPaths([basepath, ...baseSegments.map((d) => d.value)])\n\n  return cleanPath(joined)\n}\n\nexport function parsePathname(pathname?: string): Segment[] {\n  if (!pathname) {\n    return []\n  }\n\n  pathname = cleanPath(pathname)\n\n  const segments: Segment[] = []\n\n  if (pathname.slice(0, 1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!pathname) {\n    return segments\n  }\n\n  // Remove empty segments and '.' segments\n  const split = pathname.split('/').filter(Boolean)\n\n  segments.push(\n    ...split.map((part): Segment => {\n      if (part === '$' || part === '*') {\n        return {\n          type: 'wildcard',\n          value: part,\n        }\n      }\n\n      if (part.charAt(0) === '$') {\n        return {\n          type: 'param',\n          value: part,\n        }\n      }\n\n      return {\n        type: 'pathname',\n        value: part,\n      }\n    }),\n  )\n\n  if (pathname.slice(-1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  return segments\n}\n\nexport function interpolatePath(\n  path: string | undefined,\n  params: any,\n  leaveWildcards: boolean = false,\n) {\n  const interpolatedPathSegments = parsePathname(path)\n\n  return joinPaths(\n    interpolatedPathSegments.map((segment) => {\n      if (segment.type === 'wildcard') {\n        const value = params[segment.value]\n        if (leaveWildcards) return `${segment.value}${value ?? ''}`\n        return value\n      }\n\n      if (segment.type === 'param') {\n        return params![segment.value.substring(1)] ?? ''\n      }\n\n      return segment.value\n    }),\n  )\n}\n\nexport function matchPathname(\n  basepath: string,\n  currentPathname: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'fuzzy' | 'caseSensitive'>,\n): AnyPathParams | undefined {\n  const pathParams = matchByPath(basepath, currentPathname, matchLocation)\n  // const searchMatched = matchBySearch(location.search, matchLocation)\n\n  if (matchLocation.to && !pathParams) {\n    return\n  }\n\n  return pathParams ?? {}\n}\n\nexport function matchByPath(\n  basepath: string,\n  from: string,\n  matchLocation: Pick<MatchLocation, 'to' | 'caseSensitive' | 'fuzzy'>,\n): Record<string, string> | undefined {\n  // Remove the base path from the pathname\n  from = basepath != '/' ? from.substring(basepath.length) : from\n  // Default to to $ (wildcard)\n  const to = `${matchLocation.to ?? '$'}`\n  // Parse the from and to\n  const baseSegments = parsePathname(from)\n  const routeSegments = parsePathname(to)\n\n  if (!from.startsWith('/')) {\n    baseSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!to.startsWith('/')) {\n    routeSegments.unshift({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  const params: Record<string, string> = {}\n\n  let isMatch = (() => {\n    for (\n      let i = 0;\n      i < Math.max(baseSegments.length, routeSegments.length);\n      i++\n    ) {\n      const baseSegment = baseSegments[i]\n      const routeSegment = routeSegments[i]\n\n      const isLastBaseSegment = i >= baseSegments.length - 1\n      const isLastRouteSegment = i >= routeSegments.length - 1\n\n      if (routeSegment) {\n        if (routeSegment.type === 'wildcard') {\n          if (baseSegment?.value) {\n            params['*'] = joinPaths(baseSegments.slice(i).map((d) => d.value))\n            return true\n          }\n          return false\n        }\n\n        if (routeSegment.type === 'pathname') {\n          if (routeSegment.value === '/' && !baseSegment?.value) {\n            return true\n          }\n\n          if (baseSegment) {\n            if (matchLocation.caseSensitive) {\n              if (routeSegment.value !== baseSegment.value) {\n                return false\n              }\n            } else if (\n              routeSegment.value.toLowerCase() !==\n              baseSegment.value.toLowerCase()\n            ) {\n              return false\n            }\n          }\n        }\n\n        if (!baseSegment) {\n          return false\n        }\n\n        if (routeSegment.type === 'param') {\n          if (baseSegment?.value === '/') {\n            return false\n          }\n          if (baseSegment.value.charAt(0) !== '$') {\n            params[routeSegment.value.substring(1)] = baseSegment.value\n          }\n        }\n      }\n\n      if (!isLastBaseSegment && isLastRouteSegment) {\n        return !!matchLocation.fuzzy\n      }\n    }\n\n    return true\n  })()\n\n  return isMatch ? (params as Record<string, string>) : undefined\n}\n", "// @ts-nocheck\n\n// qss has been slightly modified and inlined here for our use cases (and compression's sake). We've included it as a hard dependency for MIT license attribution.\n\nexport function encode(obj, pfx?: string) {\n  var k,\n    i,\n    tmp,\n    str = ''\n\n  for (k in obj) {\n    if ((tmp = obj[k]) !== void 0) {\n      if (Array.isArray(tmp)) {\n        for (i = 0; i < tmp.length; i++) {\n          str && (str += '&')\n          str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i])\n        }\n      } else {\n        str && (str += '&')\n        str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp)\n      }\n    }\n  }\n\n  return (pfx || '') + str\n}\n\nfunction toValue(mix) {\n  if (!mix) return ''\n  var str = decodeURIComponent(mix)\n  if (str === 'false') return false\n  if (str === 'true') return true\n  if (str.charAt(0) === '0') return str\n  return +str * 0 === 0 ? +str : str\n}\n\nexport function decode(str) {\n  var tmp,\n    k,\n    out = {},\n    arr = str.split('&')\n\n  while ((tmp = arr.shift())) {\n    tmp = tmp.split('=')\n    k = tmp.shift()\n    if (out[k] !== void 0) {\n      out[k] = [].concat(out[k], toValue(tmp.shift()))\n    } else {\n      out[k] = toValue(tmp.shift())\n    }\n  }\n\n  return out\n}\n", "import * as React from 'react'\nimport { NoInfer, useStore } from '@tanstack/react-store'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport {\n  LinkOptions,\n  ToOptions,\n  ResolveRelativePath,\n  NavigateOptions,\n} from './link'\nimport { AnyRoute } from './route'\nimport { RouteByPath, AnyRoutesInfo, DefaultRoutesInfo } from './routeInfo'\nimport { AnyRouteMatch, RouteMatch } from './routeMatch'\nimport {\n  RegisteredRoutesInfo,\n  MatchRouteOptions,\n  RegisteredRouter,\n  RouterOptions,\n  RouterState,\n  Router,\n} from './router'\nimport { functionalUpdate, last } from './utils'\n\n//\n\nexport { useStore }\n\n//\n\ntype ReactNode = any\n\nexport type SyncRouteComponent<TProps = {}> = (props: TProps) => ReactNode\n\nexport type RouteComponent<TProps = {}> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n\nexport function lazy<T extends Record<string, SyncRouteComponent>>(\n  importer: () => Promise<T>,\n  exportName: keyof T = 'default',\n): RouteComponent {\n  const lazyComp = React.lazy(async () => {\n    const moduleExports = await importer()\n    const component = moduleExports[exportName]\n    return { default: component }\n  })\n\n  let preloaded: Promise<SyncRouteComponent>\n\n  const finalComp = lazyComp as unknown as RouteComponent\n\n  finalComp.preload = async () => {\n    if (!preloaded) {\n      await importer()\n    }\n  }\n\n  return finalComp\n}\n\nexport type LinkPropsOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = LinkOptions<RegisteredRoutesInfo, TFrom, TTo> & {\n  // A function that returns additional props for the `active` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  activeProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n  // A function that returns additional props for the `inactive` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n  inactiveProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n}\n\nexport type MakeUseMatchRouteOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = ToOptions<RegisteredRoutesInfo, TFrom, TTo> & MatchRouteOptions\n\nexport type MakeMatchRouteOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = ToOptions<RegisteredRoutesInfo, TFrom, TTo> &\n  MatchRouteOptions & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | ReactNode\n      | ((\n          params: RouteByPath<\n            RegisteredRoutesInfo,\n            ResolveRelativePath<TFrom, NoInfer<TTo>>\n          >['__types']['allParams'],\n        ) => ReactNode)\n  }\n\nexport type MakeLinkPropsOptions<\n  TFrom extends string = '/',\n  TTo extends string = '',\n> = LinkPropsOptions<TFrom, TTo> & React.AnchorHTMLAttributes<HTMLAnchorElement>\n\nexport type MakeLinkOptions<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = LinkPropsOptions<TFrom, TTo> &\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children'> & {\n    // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | React.ReactNode\n      | ((state: { isActive: boolean }) => React.ReactNode)\n  }\n\nexport type PromptProps = {\n  message: string\n  condition?: boolean | any\n  children?: ReactNode\n}\n\n//\n\nexport function useLinkProps<\n  TFrom extends string = '/',\n  TTo extends string = '',\n>(\n  options: MakeLinkPropsOptions<TFrom, TTo>,\n): React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  const router = useRouterContext()\n\n  const {\n    // custom props\n    type,\n    children,\n    target,\n    activeProps = () => ({ className: 'active' }),\n    inactiveProps = () => ({}),\n    activeOptions,\n    disabled,\n    // fromCurrent,\n    hash,\n    search,\n    params,\n    to = '.',\n    preload,\n    preloadDelay,\n    replace,\n    // element props\n    style,\n    className,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart,\n    ...rest\n  } = options\n\n  const linkInfo = router.buildLink(options as any)\n\n  if (linkInfo.type === 'external') {\n    const { href } = linkInfo\n    return { href }\n  }\n\n  const {\n    handleClick,\n    handleFocus,\n    handleEnter,\n    handleLeave,\n    handleTouchStart,\n    isActive,\n    next,\n  } = linkInfo\n\n  const reactHandleClick = (e: Event) => {\n    if (React.startTransition) {\n      // This is a hack for react < 18\n      React.startTransition(() => {\n        handleClick(e)\n      })\n    } else {\n      handleClick(e)\n    }\n  }\n\n  const composeHandlers =\n    (handlers: (undefined | ((e: any) => void))[]) =>\n    (e: React.SyntheticEvent) => {\n      if (e.persist) e.persist()\n      handlers.filter(Boolean).forEach((handler) => {\n        if (e.defaultPrevented) return\n        handler!(e)\n      })\n    }\n\n  // Get the active props\n  const resolvedActiveProps: React.HTMLAttributes<HTMLAnchorElement> = isActive\n    ? functionalUpdate(activeProps as any, {}) ?? {}\n    : {}\n\n  // Get the inactive props\n  const resolvedInactiveProps: React.HTMLAttributes<HTMLAnchorElement> =\n    isActive ? {} : functionalUpdate(inactiveProps, {}) ?? {}\n\n  return {\n    ...resolvedActiveProps,\n    ...resolvedInactiveProps,\n    ...rest,\n    href: disabled ? undefined : next.href,\n    onClick: composeHandlers([onClick, reactHandleClick]),\n    onFocus: composeHandlers([onFocus, handleFocus]),\n    onMouseEnter: composeHandlers([onMouseEnter, handleEnter]),\n    onMouseLeave: composeHandlers([onMouseLeave, handleLeave]),\n    onTouchStart: composeHandlers([onTouchStart, handleTouchStart]),\n    target,\n    style: {\n      ...style,\n      ...resolvedActiveProps.style,\n      ...resolvedInactiveProps.style,\n    },\n    className:\n      [\n        className,\n        resolvedActiveProps.className,\n        resolvedInactiveProps.className,\n      ]\n        .filter(Boolean)\n        .join(' ') || undefined,\n    ...(disabled\n      ? {\n          role: 'link',\n          'aria-disabled': true,\n        }\n      : undefined),\n    ['data-status']: isActive ? 'active' : undefined,\n  }\n}\n\nexport interface LinkFn<\n  TDefaultFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TDefaultTo extends string = '',\n> {\n  <\n    TFrom extends RegisteredRoutesInfo['routePaths'] = TDefaultFrom,\n    TTo extends string = TDefaultTo,\n  >(\n    props: MakeLinkOptions<TFrom, TTo> & React.RefAttributes<HTMLAnchorElement>,\n  ): ReactNode\n}\n\nexport const Link: LinkFn = React.forwardRef((props: any, ref) => {\n  const linkProps = useLinkProps(props)\n\n  return (\n    <a\n      {...{\n        ref: ref as any,\n        ...linkProps,\n        children:\n          typeof props.children === 'function'\n            ? props.children({\n                isActive: (linkProps as any)['data-status'] === 'active',\n              })\n            : props.children,\n      }}\n    />\n  )\n}) as any\n\nexport function Navigate<\n  TFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n>(props: NavigateOptions<RegisteredRoutesInfo, TFrom, TTo>): null {\n  const router = useRouterContext()\n\n  React.useLayoutEffect(() => {\n    router.navigate(props as any)\n  }, [])\n\n  return null\n}\n\ntype MatchesContextValue = AnyRouteMatch[]\n\nexport const matchesContext = React.createContext<MatchesContextValue>(null!)\nexport const routerContext = React.createContext<{ router: RegisteredRouter }>(\n  null!,\n)\n\nexport type MatchesProviderProps = {\n  value: MatchesContextValue\n  children: ReactNode\n}\n\nexport type RouterProps<\n  TRouteConfig extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> = RouterOptions<TRouteConfig, TDehydrated> & {\n  router: Router<TRouteConfig, TRoutesInfo>\n}\n\n// const useDeferredValue = React.useDeferredValue || ((d) => d)\nconst useDeferredValue = <T,>(d: T) => d\n\nexport function RouterProvider<\n  TRouteConfig extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>({ router, ...rest }: RouterProps<TRouteConfig, TRoutesInfo, TDehydrated>) {\n  router.update(rest)\n\n  const matches = useDeferredValue(\n    useStore(router.__store, (s) => {\n      return s.matches\n    }),\n  )\n\n  React.useEffect(router.mount, [router])\n\n  return (\n    <routerContext.Provider value={{ router: router as any }}>\n      <matchesContext.Provider value={[undefined!, ...matches]}>\n        <CatchBoundary\n          errorComponent={ErrorComponent}\n          onCatch={() => {\n            warning(\n              false,\n              `Error in router! Consider setting an 'errorComponent' in your RootRoute! 👍`,\n            )\n          }}\n        >\n          <Outlet />\n        </CatchBoundary>\n      </matchesContext.Provider>\n    </routerContext.Provider>\n  )\n}\n\nexport function useRouterContext(): RegisteredRouter {\n  const value = React.useContext(routerContext)\n  warning(value, 'useRouter must be used inside a <Router> component!')\n\n  useStore(value.router.__store)\n\n  return value.router\n}\n\nexport function useRouter<T = RouterState>(\n  track?: (state: Router['__store']['state']) => T,\n): RegisteredRouter {\n  const router = useRouterContext()\n  useStore(router.__store, track as any)\n  return router\n}\n\nexport function useMatches(): RouteMatch[] {\n  return React.useContext(matchesContext)\n}\n\nexport function useMatch<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TRouteMatch = RouteMatch<\n    RegisteredRoutesInfo,\n    RegisteredRoutesInfo['routesById'][TFrom]\n  >,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  track?: (match: TRouteMatch) => any\n}): TStrict extends true ? TRouteMatch : TRouteMatch | undefined {\n  const router = useRouterContext()\n  const nearestMatch = useMatches()[0]!\n  const matches = useDeferredValue(router.state.matches)\n  const match = opts?.from\n    ? matches.find((d) => d.route.id === opts?.from)\n    : nearestMatch\n\n  invariant(\n    match,\n    `Could not find ${\n      opts?.from ? `an active match from \"${opts.from}\"` : 'a nearest match!'\n    }`,\n  )\n\n  if (opts?.strict ?? true) {\n    invariant(\n      nearestMatch.route.id == match?.route.id,\n      `useMatch(\"${\n        match?.route.id as string\n      }\") is being called in a component that is meant to render the '${\n        nearestMatch.route.id\n      }' route. Did you mean to 'useMatch(\"${\n        match?.route.id as string\n      }\", { strict: false })' or 'useRoute(\"${\n        match?.route.id as string\n      }\")' instead?`,\n    )\n  }\n\n  useStore(match!.__store as any, (d) => opts?.track?.(match as any) ?? match)\n\n  return match as any\n}\n\nexport type RouteFromIdOrRoute<T> = T extends RegisteredRoutesInfo['routeUnion']\n  ? T\n  : T extends keyof RegisteredRoutesInfo['routesById']\n  ? RegisteredRoutesInfo['routesById'][T]\n  : T extends string\n  ? keyof RegisteredRoutesInfo['routesById']\n  : never\n\nexport function useLoader<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TLoader = RegisteredRoutesInfo['routesById'][TFrom]['__types']['loader'],\n  TSelected = TLoader,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  track?: (search: TLoader) => TSelected\n}): TStrict extends true ? TSelected : TSelected | undefined {\n  const { track, ...matchOpts } = opts as any\n  const match = useMatch(matchOpts)\n  useStore(match.__store, (d: any) => opts?.track?.(d.loader) ?? d.loader)\n  return (match as unknown as RouteMatch).state.loader as any\n}\n\nexport function useSearch<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'],\n  TStrict extends boolean = true,\n  TSearch = RegisteredRoutesInfo['routesById'][TFrom]['__types']['fullSearchSchema'],\n  TSelected = TSearch,\n>(opts?: {\n  from: TFrom\n  strict?: TStrict\n  track?: (search: TSearch) => TSelected\n}): TStrict extends true ? TSelected : TSelected | undefined {\n  const { track, ...matchOpts } = (opts ?? {}) as any\n  const match = useMatch(matchOpts)\n  useStore(match.__store, (d: any) => opts?.track?.(d.search) ?? d.search)\n\n  return (match as unknown as RouteMatch).state.search as any\n}\n\nexport function useParams<\n  TFrom extends keyof RegisteredRoutesInfo['routesById'] = '/',\n  TDefaultSelected = RegisteredRoutesInfo['allParams'] &\n    RegisteredRoutesInfo['routesById'][TFrom]['__types']['allParams'],\n  TSelected = TDefaultSelected,\n>(opts?: {\n  from: TFrom\n  track?: (search: TDefaultSelected) => TSelected\n}): TSelected {\n  const router = useRouterContext()\n  return useStore(router.__store, (d) => {\n    const params = last(d.matches)?.params as any\n    return opts?.track?.(params) ?? params\n  })\n\n  // return last(router.state.matches)?.params as any\n}\n\nexport function useNavigate<\n  TDefaultFrom extends RegisteredRoutesInfo['routePaths'] = '/',\n>(defaultOpts?: { from?: TDefaultFrom }) {\n  const router = useRouterContext()\n  return React.useCallback(\n    <\n      TFrom extends RegisteredRoutesInfo['routePaths'] = TDefaultFrom,\n      TTo extends string = '',\n    >(\n      opts?: NavigateOptions<RegisteredRoutesInfo, TFrom, TTo>,\n    ) => {\n      return router.navigate({ ...defaultOpts, ...(opts as any) })\n    },\n    [],\n  )\n}\n\nexport function useMatchRoute() {\n  const router = useRouterContext()\n\n  return React.useCallback(\n    <TFrom extends string = '/', TTo extends string = ''>(\n      opts: MakeUseMatchRouteOptions<TFrom, TTo>,\n    ) => {\n      const { pending, caseSensitive, ...rest } = opts\n\n      return router.matchRoute(rest as any, {\n        pending,\n        caseSensitive,\n      })\n    },\n    [],\n  )\n}\n\nexport function MatchRoute<TFrom extends string = '/', TTo extends string = ''>(\n  props: MakeMatchRouteOptions<TFrom, TTo>,\n): any {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute(props)\n\n  if (!params) {\n    return null\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children as any)(params)\n  }\n\n  return params ? props.children : null\n}\n\nexport function Outlet() {\n  const matches = useMatches().slice(1)\n  const match = matches[0]\n\n  if (!match) {\n    return null\n  }\n\n  return <SubOutlet matches={matches} match={match} />\n}\n\nfunction SubOutlet({\n  matches,\n  match,\n}: {\n  matches: RouteMatch[]\n  match: RouteMatch\n}) {\n  const router = useRouterContext()\n  useStore(match!.__store, (store) => [store.status, store.error])\n\n  const defaultPending = React.useCallback(() => null, [])\n\n  const PendingComponent = (match.pendingComponent ??\n    router.options.defaultPendingComponent ??\n    defaultPending) as any\n\n  const errorComponent =\n    match.errorComponent ?? router.options.defaultErrorComponent\n\n  const ResolvedSuspenseBoundary =\n    match.route.options.wrapInSuspense ?? !match.route.isRoot\n      ? React.Suspense\n      : SafeFragment\n\n  const ResolvedCatchBoundary = errorComponent ? CatchBoundary : SafeFragment\n\n  // if (typeof document === 'undefined') {\n  //   if (match.state.loader) {\n  //     Object.keys(match.state.loader).forEach((key) => {\n  //       let value = match.state.loader[key]\n\n  //       if (value instanceof Promise || value.then) {\n  //         value = {\n  //           __isPromise: true,\n  //           key: key,\n  //         }\n  //       }\n\n  //       dehydrated[key] = value\n  //     })\n  //   }\n  // } else {\n  // }\n\n  return (\n    <matchesContext.Provider value={matches}>\n      <ResolvedSuspenseBoundary fallback={<PendingComponent />}>\n        <ResolvedCatchBoundary\n          key={match.route.id}\n          errorComponent={errorComponent}\n          onCatch={() => {\n            warning(false, `Error in route match: ${match.id}`)\n          }}\n        >\n          <Inner match={match} />\n          {/* {!match.route.isRoot\n            ? Object.keys(match.__promisesByKey).map((key) => {\n                return (\n                  <React.Suspense key={key}>\n                    <StreamScript\n                      match={match}\n                      promiseKey={key}\n                      promise={match.__promisesByKey[key]!}\n                    />\n                  </React.Suspense>\n                )\n              })\n            : null} */}\n        </ResolvedCatchBoundary>\n      </ResolvedSuspenseBoundary>\n    </matchesContext.Provider>\n  )\n}\n\nexport function useInjectHtml() {\n  const router = useRouterContext()\n\n  return React.useCallback(\n    (html: string | (() => Promise<string> | string)) => {\n      router.injectHtml(html)\n    },\n    [],\n  )\n}\n\nexport function useDehydrate() {\n  const router = useRouterContext()\n\n  return React.useCallback(function dehydrate<T>(\n    key: any,\n    data: T | (() => Promise<T> | T),\n  ) {\n    return router.dehydrateData(key, data)\n  },\n  [])\n}\n\nexport function useHydrate() {\n  const router = useRouterContext()\n\n  return function hydrate<T = unknown>(key: any) {\n    return router.hydrateData(key) as T\n  }\n}\n\nfunction Inner(props: { match: RouteMatch }): any {\n  const router = useRouterContext()\n\n  if (props.match.state.status === 'error') {\n    throw props.match.state.error\n  }\n\n  if (props.match.state.status === 'pending') {\n    throw props.match.__loadPromise\n  }\n\n  if (props.match.state.status === 'success') {\n    let comp = props.match.component ?? router.options.defaultComponent\n\n    if (comp) {\n      return React.createElement(comp, {\n        useLoader: props.match.route.useLoader,\n        useMatch: props.match.route.useMatch,\n        useContext: props.match.route.useContext,\n        useSearch: props.match.route.useSearch,\n        useParams: props.match.route.useParams,\n      })\n    }\n\n    return <Outlet />\n  }\n\n  invariant(\n    false,\n    'Idle routeMatch status encountered during rendering! You should never see this. File an issue!',\n  )\n}\n\nfunction SafeFragment(props: any) {\n  return <>{props.children}</>\n}\n\n// This is the messiest thing ever... I'm either seriously tired (likely) or\n// there has to be a better way to reset error boundaries when the\n// router's location key changes.\n\nclass CatchBoundary extends React.Component<{\n  children: any\n  errorComponent: any\n  onCatch: (error: any, info: any) => void\n}> {\n  state = {\n    error: false,\n    info: undefined,\n  }\n  componentDidCatch(error: any, info: any) {\n    this.props.onCatch(error, info)\n    console.error(error)\n    this.setState({\n      error,\n      info,\n    })\n  }\n  render() {\n    return (\n      <CatchBoundaryInner\n        {...this.props}\n        errorState={this.state}\n        reset={() => this.setState({})}\n      />\n    )\n  }\n}\n\nfunction CatchBoundaryInner(props: {\n  children: any\n  errorComponent: any\n  errorState: { error: unknown; info: any }\n  reset: () => void\n}) {\n  const [activeErrorState, setActiveErrorState] = React.useState(\n    props.errorState,\n  )\n  const router = useRouterContext()\n  const errorComponent = props.errorComponent ?? ErrorComponent\n  const prevKeyRef = React.useRef('' as any)\n\n  React.useEffect(() => {\n    if (activeErrorState) {\n      if (router.state.location.key !== prevKeyRef.current) {\n        // setActiveErrorState({} as any)\n      }\n    }\n\n    prevKeyRef.current = router.state.location.key\n  }, [activeErrorState, router.state.location.key])\n\n  React.useEffect(() => {\n    if (props.errorState.error) {\n      // setActiveErrorState(props.errorState)\n    }\n    // props.reset()\n  }, [props.errorState.error])\n\n  if (props.errorState.error && activeErrorState.error) {\n    return React.createElement(errorComponent, activeErrorState)\n  }\n\n  return props.children\n}\n\nexport function ErrorComponent({ error }: { error: any }) {\n  return (\n    <div style={{ padding: '.5rem', maxWidth: '100%' }}>\n      <strong style={{ fontSize: '1.2rem' }}>Something went wrong!</strong>\n      <div style={{ height: '.5rem' }} />\n      <div>\n        <pre\n          style={{\n            fontSize: '.7em',\n            border: '1px solid red',\n            borderRadius: '.25rem',\n            padding: '.5rem',\n            color: 'red',\n            overflow: 'auto',\n          }}\n        >\n          {error.message ? <code>{error.message}</code> : null}\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport function useBlocker(\n  message: string,\n  condition: boolean | any = true,\n): void {\n  const router = useRouter()\n\n  React.useEffect(() => {\n    if (!condition) return\n\n    let unblock = router.history.block((retry, cancel) => {\n      if (window.confirm(message)) {\n        unblock()\n        retry()\n      }\n    })\n\n    return unblock\n  })\n}\n\nexport function Block({ message, condition, children }: PromptProps) {\n  useBlocker(message, condition)\n  return (children ?? null) as ReactNode\n}\n", "import { ParsePathParams } from './link'\nimport { RouteMatch } from './routeMatch'\nimport { AnyRouter, RegisteredRoutesInfo, Router } from './router'\nimport {\n  IsAny,\n  NoInfer,\n  PickRequired,\n  PickUnsafe,\n  UnionToIntersection,\n} from './utils'\nimport invariant from 'tiny-invariant'\nimport { joinPaths, trimPath, trimPathRight } from './path'\nimport { AnyRoutesInfo, DefaultRoutesInfo } from './routeInfo'\nimport {\n  MakeLinkOptions,\n  RouteComponent,\n  useLoader,\n  useMatch,\n  useParams,\n  useSearch,\n} from './react'\n\nexport const rootRouteId = '__root__' as const\nexport type RootRouteId = typeof rootRouteId\nexport type AnyPathParams = {}\nexport type AnySearchSchema = {}\nexport type AnyContext = {}\nexport interface RouteMeta {}\nexport interface RouteContext {}\n\nexport type RouteOptionsBase<TCustomId, TPath> =\n  | {\n      path: TPath\n    }\n  | {\n      id: TCustomId\n    }\n\nexport type RouteOptionsBaseIntersection<TCustomId, TPath> =\n  UnionToIntersection<RouteOptionsBase<TCustomId, TPath>>\n\nexport type MetaOptions = keyof PickRequired<RouteMeta> extends never\n  ? {\n      meta?: RouteMeta\n    }\n  : {\n      meta: RouteMeta\n    }\n\ntype GetContextFn<\n  TParentRoute,\n  TAllParams,\n  TFullSearchSchema,\n  TParentContext,\n  TAllParentContext,\n  TRouteContext,\n> = (\n  opts: {\n    params: TAllParams\n    search: TFullSearchSchema\n  } & (TParentRoute extends undefined\n    ? {\n        context?: TAllParentContext\n        parentContext?: TParentContext\n      }\n    : {\n        context: TAllParentContext\n        parentContext: TParentContext\n      }),\n) => TRouteContext\n\nexport type ContextOptions<\n  TParentRoute,\n  TAllParams,\n  TFullSearchSchema,\n  TParentContext,\n  TAllParentContext,\n  TRouteContext,\n> = keyof PickRequired<RouteContext> extends never\n  ? {\n      getContext?: GetContextFn<\n        TParentRoute,\n        TAllParams,\n        TFullSearchSchema,\n        TParentContext,\n        TAllParentContext,\n        TRouteContext\n      >\n    }\n  : {\n      getContext: GetContextFn<\n        TParentRoute,\n        TAllParams,\n        TFullSearchSchema,\n        TParentContext,\n        TAllParentContext,\n        TRouteContext\n      >\n    }\n\nexport type RouteProps<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TFullPath extends ResolveFullPath<\n    TParentRoute,\n    TPath,\n    RoutePrefix<TParentRoute['fullPath'], TPath>\n  >,\n  TCustomId extends string,\n  TId extends ResolveId<TParentRoute, TCustomId, TPath>,\n  TLoader,\n  TSearchSchema extends AnySearchSchema,\n  TFullSearchSchema extends AnySearchSchema,\n  TAllParams,\n  TParentContext,\n  TAllParentContext extends IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  >,\n  TRouteContext,\n  TContext,\n  TRouterContext extends AnyContext,\n> = {\n  useMatch: () => RouteMatch<\n    AnyRoutesInfo,\n    Route<\n      TParentRoute,\n      TPath,\n      TFullPath,\n      TCustomId,\n      TId,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      TRouterContext,\n      any,\n      any\n    >\n  >\n  useLoader: () => UseLoaderResult<TLoader>\n  useSearch: <\n    TStrict extends boolean = true,\n    TSearch = TFullSearchSchema,\n    TSelected = TSearch,\n  >(opts?: {\n    strict?: TStrict\n    track?: (search: TSearch) => TSelected\n  }) => TStrict extends true ? TSelected : TSelected | undefined\n  useParams: <\n    TDefaultSelected = TAllParams,\n    TSelected = TDefaultSelected,\n  >(opts?: {\n    track?: (search: TDefaultSelected) => TSelected\n  }) => TSelected\n  useContext: () => TContext\n  // navigate: <T extends TFullPath, TTo extends string = ''>(\n  //   opts?: MakeLinkOptions<T, TTo>,\n  // ) => Promise<void>\n}\n\nexport type RouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TLoader = unknown,\n  TParentSearchSchema extends {} = {},\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = TSearchSchema,\n  TParentParams extends AnyPathParams = {},\n  TParams = Record<ParsePathParams<TPath>, string>,\n  TAllParams = TParams,\n  TParentContext extends AnyContext = AnyContext,\n  TAllParentContext extends IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  > = IsAny<\n    TParentRoute['__types']['allParams'],\n    TParentContext,\n    TParentRoute['__types']['allParams'] & TParentContext\n  >,\n  TRouteContext extends RouteContext = RouteContext,\n  TContext extends MergeFromParent<\n    TAllParentContext,\n    TRouteContext\n  > = MergeFromParent<TAllParentContext, TRouteContext>,\n> = RouteOptionsBase<TCustomId, TPath> & {\n  getParentRoute: () => TParentRoute\n  // Optionally call this function to get a unique key for this route.\n  // This is useful for routes that need to be uniquely identified\n  // by more than their by search params\n  getKey?: OnLoadFnKey<\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    NoInfer<TRouteContext>,\n    TContext\n  >\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // Filter functions that can manipulate search params *before* they are passed to links and navigate\n  // calls that match this route.\n  preSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  // Filter functions that can manipulate search params *after* they are passed to links and navigate\n  // calls that match this route.\n  postSearchFilters?: SearchFilter<TFullSearchSchema>[]\n  // The content to be rendered when the route is matched. If no component is provided, defaults to `<Outlet />`\n  component?: RouteComponent<\n    RouteProps<\n      TParentRoute,\n      TPath,\n      ResolveFullPath<TParentRoute, TPath>,\n      TCustomId,\n      ResolveId<TParentRoute, TCustomId, TPath>,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      NoInfer<TRouteContext>\n    >\n  > //\n  // The content to be rendered when the route encounters an error\n  errorComponent?: RouteComponent<{\n    error: Error\n    info: { componentStack: string }\n  }> //\n  // If supported by your framework, the content to be rendered as the fallback content until the route is ready to render\n  pendingComponent?: RouteComponent<\n    RouteProps<\n      TParentRoute,\n      TPath,\n      ResolveFullPath<TParentRoute, TPath>,\n      TCustomId,\n      ResolveId<TParentRoute, TCustomId, TPath>,\n      TLoader,\n      TSearchSchema,\n      TFullSearchSchema,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext,\n      NoInfer<TRouteContext>\n    >\n  > //\n  wrapInSuspense?: boolean\n\n  // This async function is called before a route is loaded.\n  // If an error is thrown here, the route's loader will not be called.\n  // If thrown during a navigation, the navigation will be cancelled and the error will be passed to the `onLoadError` function.\n  // If thrown during a preload event, the error will be logged to the console.\n  beforeLoad?: (opts: {\n    router: AnyRouter\n    match: RouteMatch\n  }) => Promise<void> | void\n  // This function will be called if the route's loader throws an error **during an attempted navigation**.\n  // If you want to redirect due to an error, call `router.navigate()` from within this function.\n  onBeforeLoadError?: (err: any) => void\n  validateSearch?: SearchSchemaValidator<TSearchSchema, TParentSearchSchema>\n  // This function will be called if the route's validateSearch option throws an error **during an attempted validation**.\n  // If you want to redirect due to an error, call `router.navigate()` from within this function.\n  // If you want to display the errorComponent, rethrow the error\n  onValidateSearchError?: (err: any) => void\n  // An asynchronous function responsible for preparing or fetching data for the route before it is rendered\n  loader?: OnLoadFn<\n    TLoader,\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    NoInfer<TRouteContext>,\n    TContext\n  >\n  onLoadError?: (err: any) => void\n  onError?: (err: any) => void\n  // This function is called\n  // when moving from an inactive state to an active one. Likewise, when moving from\n  // an active to an inactive state, the return function (if provided) is called.\n  onLoaded?: (matchContext: {\n    params: TAllParams\n    search: TFullSearchSchema\n  }) =>\n    | void\n    | undefined\n    | ((match: { params: TAllParams; search: TFullSearchSchema }) => void)\n  // This function is called when the route remains active from one transition to the next.\n  onTransition?: (match: {\n    params: TAllParams\n    search: TFullSearchSchema\n  }) => void\n} & MetaOptions &\n  ContextOptions<\n    TParentRoute,\n    TAllParams,\n    TFullSearchSchema,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext\n  > &\n  (\n    | {\n        // Parse params optionally receives path params as strings and returns them in a parsed format (like a number or boolean)\n        parseParams?: (\n          rawParams: IsAny<TPath, any, Record<ParsePathParams<TPath>, string>>,\n        ) => TParams extends Record<ParsePathParams<TPath>, any>\n          ? TParams\n          : 'parseParams must return an object'\n        stringifyParams?: (\n          params: NoInfer<TParams>,\n        ) => Record<ParsePathParams<TPath>, string>\n      }\n    | {\n        stringifyParams?: never\n        parseParams?: never\n      }\n  ) &\n  (PickUnsafe<TParentParams, ParsePathParams<TPath>> extends never // Detect if an existing path param is being redefined\n    ? { test?: PickUnsafe<TParentParams, ParsePathParams<TPath>> }\n    : 'Cannot redefined path params in child routes!')\n\n// The parse type here allows a zod schema to be passed directly to the validator\nexport type SearchSchemaValidator<TReturn, TParentSchema> =\n  | SearchSchemaValidatorObj<TReturn, TParentSchema>\n  | SearchSchemaValidatorFn<TReturn, TParentSchema>\n\nexport type SearchSchemaValidatorObj<TReturn, TParentSchema> = {\n  parse?: SearchSchemaValidatorFn<TReturn, TParentSchema>\n}\n\nexport type SearchSchemaValidatorFn<TReturn, TParentSchema> = (\n  searchObj: Record<string, unknown>,\n) => {} extends TParentSchema\n  ? TReturn\n  : keyof TReturn extends keyof TParentSchema\n  ? {\n      error: 'Top level search params cannot be redefined by child routes!'\n      keys: keyof TReturn & keyof TParentSchema\n    }\n  : TReturn\n\nexport type DefinedPathParamWarning =\n  'Path params cannot be redefined by child routes!'\n\nexport type ParentParams<TParentParams> = AnyPathParams extends TParentParams\n  ? {}\n  : {\n      [Key in keyof TParentParams]?: DefinedPathParamWarning\n    }\n\nexport type OnLoadFn<\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> = (\n  loaderContext: LoaderContext<\n    TSearchSchema,\n    TFullSearchSchema,\n    TAllParams,\n    TContext,\n    TAllContext\n  >,\n) => Promise<TLoader> | TLoader\n\nexport type OnLoadFnKey<\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> = (\n  loaderContext: {\n    params: TAllParams\n    search: TFullSearchSchema\n  },\n  // loaderContext: LoaderContext<\n  //   TSearchSchema,\n  //   TFullSearchSchema,\n  //   TAllParams,\n  //   TContext,\n  //   TAllContext\n  // >,\n) => any\n\nexport interface LoaderContext<\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = {},\n  TAllParams = {},\n  TContext extends AnyContext = AnyContext,\n  TAllContext extends AnyContext = AnyContext,\n> {\n  params: TAllParams\n  routeSearch: TSearchSchema\n  search: TFullSearchSchema\n  signal?: AbortSignal\n  preload: boolean\n  routeContext: TContext\n  context: TAllContext\n  // serverOnly: <\n  //   TServer extends object | (() => object),\n  //   TClient extends object | (() => object),\n  // >(\n  //   server: TServer,\n  //   client: TClient,\n  // ) => (TServer extends () => infer TReturn ? TReturn : TServer) &\n  //   (TClient extends () => infer TReturn ? TReturn : TClient)\n}\n\nexport type UnloaderFn<TPath extends string> = (\n  routeMatch: RouteMatch<any, Route>,\n) => void\n\nexport type SearchFilter<T, U = T> = (prev: T) => U\n\ntype ResolveId<\n  TParentRoute,\n  TCustomId extends string,\n  TPath extends string,\n> = TParentRoute extends { id: infer TParentId extends string }\n  ? RoutePrefix<TParentId, string extends TCustomId ? TPath : TCustomId>\n  : RootRouteId\n\nexport type InferFullSearchSchema<TRoute> = TRoute extends {\n  isRoot: true\n  __types: {\n    searchSchema: infer TSearchSchema\n  }\n}\n  ? TSearchSchema\n  : TRoute extends {\n      __types: {\n        fullSearchSchema: infer TFullSearchSchema\n      }\n    }\n  ? TFullSearchSchema\n  : {}\n\nexport type ResolveFullSearchSchema<TParentRoute, TSearchSchema> =\n  InferFullSearchSchema<TParentRoute> & TSearchSchema\n\nexport interface AnyRoute\n  extends Route<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  > {}\n\ntype MergeFromParent<T, U> = IsAny<T, U, T & U>\n\nexport type UseLoaderResult<T> = T extends Record<PropertyKey, infer U>\n  ? {\n      [K in keyof T]: UseLoaderResultPromise<T[K]>\n    }\n  : UseLoaderResultPromise<T>\n\nexport type UseLoaderResultPromise<T> = T extends Promise<infer U>\n  ? StreamedPromise<U>\n  : T\n\nexport type StreamedPromise<T> = {\n  promise: Promise<T>\n  status: 'resolved' | 'pending'\n  data: T\n  resolve: (value: T) => void\n}\n\nexport class Route<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TPath extends string = '/',\n  TFullPath extends ResolveFullPath<TParentRoute, TPath> = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  TCustomId extends string = string,\n  TId extends ResolveId<TParentRoute, TCustomId, TPath> = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TFullSearchSchema extends AnySearchSchema = ResolveFullSearchSchema<\n    TParentRoute,\n    TSearchSchema\n  >,\n  TParams extends Record<ParsePathParams<TPath>, any> = Record<\n    ParsePathParams<TPath>,\n    string\n  >,\n  TAllParams extends MergeFromParent<\n    TParentRoute['__types']['allParams'],\n    TParams\n  > = MergeFromParent<TParentRoute['__types']['allParams'], TParams>,\n  TParentContext extends TParentRoute['__types']['routeContext'] = TParentRoute['__types']['routeContext'],\n  TAllParentContext extends TParentRoute['__types']['context'] = TParentRoute['__types']['context'],\n  TRouteContext extends RouteContext = RouteContext,\n  TContext extends MergeFromParent<\n    TParentRoute['__types']['context'],\n    TRouteContext\n  > = MergeFromParent<TParentRoute['__types']['context'], TRouteContext>,\n  TRouterContext extends AnyContext = AnyContext,\n  TChildren extends unknown = unknown,\n  TRoutesInfo extends DefaultRoutesInfo = DefaultRoutesInfo,\n> {\n  __types!: {\n    parentRoute: TParentRoute\n    path: TPath\n    to: TrimPathRight<TFullPath>\n    fullPath: TFullPath\n    customId: TCustomId\n    id: TId\n    loader: TLoader\n    searchSchema: TSearchSchema\n    fullSearchSchema: TFullSearchSchema\n    params: TParams\n    allParams: TAllParams\n    parentContext: TParentContext\n    allParentContext: TAllParentContext\n    routeContext: TRouteContext\n    context: TContext\n    children: TChildren\n    routesInfo: TRoutesInfo\n    routerContext: TRouterContext\n  }\n  isRoot: TParentRoute extends Route<any> ? true : false\n  options: RouteOptions<\n    TParentRoute,\n    TCustomId,\n    TPath,\n    TLoader,\n    InferFullSearchSchema<TParentRoute>,\n    TSearchSchema,\n    InferFullSearchSchema<TParentRoute> & TSearchSchema,\n    TParentRoute['__types']['allParams'],\n    TParams,\n    TAllParams,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext,\n    TContext\n  >\n\n  // Set up in this.init()\n  parentRoute!: TParentRoute\n  id!: TId\n  // customId!: TCustomId\n  path!: TPath\n  fullPath!: TFullPath\n  to!: TrimPathRight<TFullPath>\n\n  // Optional\n  children?: TChildren\n  originalIndex?: number\n  router?: Router<TRoutesInfo['routeTree'], TRoutesInfo>\n  rank!: number\n\n  constructor(\n    options: RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TLoader,\n      InferFullSearchSchema<TParentRoute>,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentRoute['__types']['allParams'],\n      TParams,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext\n    >,\n  ) {\n    this.options = (options as any) || {}\n    this.isRoot = !options?.getParentRoute as any\n  }\n\n  init = (opts: { originalIndex: number; router: AnyRouter }) => {\n    this.originalIndex = opts.originalIndex\n    this.router = opts.router\n\n    const allOptions = this.options as RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TPath,\n      TLoader,\n      InferFullSearchSchema<TParentRoute>,\n      TSearchSchema,\n      TFullSearchSchema,\n      TParentRoute['__types']['allParams'],\n      TParams,\n      TAllParams,\n      TParentContext,\n      TAllParentContext,\n      TRouteContext,\n      TContext\n    > &\n      RouteOptionsBaseIntersection<TCustomId, TPath>\n\n    const isRoot = !allOptions?.path && !allOptions?.id\n\n    this.parentRoute = this.options?.getParentRoute?.()\n\n    if (isRoot) {\n      this.path = rootRouteId as TPath\n    } else {\n      invariant(\n        this.parentRoute,\n        `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`,\n      )\n    }\n\n    let path: undefined | string = isRoot ? rootRouteId : allOptions.path\n\n    // If the path is anything other than an index path, trim it up\n    if (path && path !== '/') {\n      path = trimPath(path)\n    }\n\n    const customId = allOptions?.id || path\n\n    // Strip the parentId prefix from the first level of children\n    let id = isRoot\n      ? rootRouteId\n      : joinPaths([\n          (this.parentRoute.id as any) === rootRouteId\n            ? ''\n            : this.parentRoute.id,\n          customId,\n        ])\n\n    if (path === rootRouteId) {\n      path = '/'\n    }\n\n    if (id !== rootRouteId) {\n      id = joinPaths(['/', id])\n    }\n\n    const fullPath =\n      id === rootRouteId ? '/' : joinPaths([this.parentRoute.fullPath, path])\n\n    this.path = path as TPath\n    this.id = id as TId\n    // this.customId = customId as TCustomId\n    this.fullPath = fullPath as TFullPath\n    this.to = fullPath as TrimPathRight<TFullPath>\n  }\n\n  addChildren = <TNewChildren extends AnyRoute[]>(\n    children: TNewChildren,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TLoader,\n    TSearchSchema,\n    TFullSearchSchema,\n    TParams,\n    TAllParams,\n    TParentContext,\n    TAllParentContext,\n    TRouteContext,\n    TContext,\n    TRouterContext,\n    TNewChildren,\n    TRoutesInfo\n  > => {\n    this.children = children as any\n    return this as any\n  }\n\n  useMatch = <TStrict extends boolean = true, TSelected = TContext>(opts?: {\n    strict?: TStrict\n    track?: (search: TContext) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useMatch({ ...opts, from: this.id }) as any\n  }\n\n  useLoader = <TStrict extends boolean = true, TSelected = TLoader>(opts?: {\n    strict?: TStrict\n    track?: (search: TLoader) => TSelected\n  }): TStrict extends true\n    ? UseLoaderResult<TSelected>\n    : UseLoaderResult<TSelected> | undefined => {\n    return useLoader({ ...opts, from: this.id }) as any\n  }\n\n  useContext = <TStrict extends boolean = true, TSelected = TContext>(opts?: {\n    strict?: TStrict\n    track?: (search: TContext) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useMatch({ ...opts, from: this.id }).context\n  }\n\n  useSearch = <\n    TStrict extends boolean = true,\n    TSelected = TFullSearchSchema,\n  >(opts?: {\n    strict?: TStrict\n    track?: (search: TFullSearchSchema) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useSearch({ ...opts, from: this.id })\n  }\n\n  useParams = <TStrict extends boolean = true, TSelected = TAllParams>(opts?: {\n    strict?: TStrict\n    track?: (search: TAllParams) => TSelected\n  }): TStrict extends true ? TSelected : TSelected | undefined => {\n    return useParams({ ...opts, from: this.id })\n  }\n}\n\nexport type AnyRootRoute = RootRoute<any, any, any, any>\n\nexport class RootRoute<\n  TLoader = unknown,\n  TSearchSchema extends AnySearchSchema = {},\n  TContext extends RouteContext = RouteContext,\n  TRouterContext extends {} = {},\n> extends Route<\n  any,\n  '/',\n  '/',\n  string,\n  RootRouteId,\n  TLoader,\n  TSearchSchema,\n  TSearchSchema,\n  {},\n  {},\n  TRouterContext,\n  TRouterContext,\n  MergeFromParent<TRouterContext, TContext>,\n  MergeFromParent<TRouterContext, TContext>,\n  TRouterContext,\n  any,\n  any\n> {\n  constructor(\n    options?: Omit<\n      RouteOptions<\n        AnyRoute,\n        RootRouteId,\n        '',\n        TLoader,\n        {},\n        TSearchSchema,\n        NoInfer<TSearchSchema>,\n        {},\n        TRouterContext,\n        TRouterContext,\n        TContext,\n        NoInfer<TContext>\n      >,\n      | 'path'\n      | 'id'\n      | 'getParentRoute'\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n    >,\n  ) {\n    super(options as any)\n  }\n\n  static withRouterContext = <TRouterContext extends {}>() => {\n    return <\n      TLoader = unknown,\n      TSearchSchema extends AnySearchSchema = {},\n      TContext extends {} = {},\n    >(\n      options?: Omit<\n        RouteOptions<\n          AnyRoute,\n          RootRouteId,\n          '',\n          TLoader,\n          {},\n          TSearchSchema,\n          NoInfer<TSearchSchema>,\n          {},\n          TRouterContext,\n          TRouterContext,\n          TContext,\n          TRouterContext & TContext\n        >,\n        'path' | 'id' | 'getParentRoute' | 'caseSensitive'\n      >,\n    ) =>\n      new RootRoute<TLoader, TSearchSchema, TContext, TRouterContext>(\n        options as any,\n      )\n  }\n}\n\ntype ResolveFullPath<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TPrefixed extends RoutePrefix<TParentRoute['fullPath'], TPath> = RoutePrefix<\n    TParentRoute['fullPath'],\n    TPath\n  >,\n> = TPrefixed extends RootRouteId ? '/' : TPrefixed\n\ntype RoutePrefix<\n  TPrefix extends string,\n  TPath extends string,\n> = string extends TPath\n  ? RootRouteId\n  : TPath extends string\n  ? TPrefix extends RootRouteId\n    ? TPath extends '/'\n      ? '/'\n      : `/${TrimPath<TPath>}`\n    : `${TPrefix}/${TPath}` extends '/'\n    ? '/'\n    : `/${TrimPathLeft<`${TrimPathRight<TPrefix>}/${TrimPath<TPath>}`>}`\n  : never\n\nexport type TrimPath<T extends string> = '' extends T\n  ? ''\n  : TrimPathRight<TrimPathLeft<T>>\n\nexport type TrimPathLeft<T extends string> =\n  T extends `${RootRouteId}/${infer U}`\n    ? TrimPathLeft<U>\n    : T extends `/${infer U}`\n    ? TrimPathLeft<U>\n    : T\nexport type TrimPathRight<T extends string> = T extends '/'\n  ? '/'\n  : T extends `${infer U}/`\n  ? TrimPathRight<U>\n  : T\n\n// const rootRoute = new RootRoute({\n//   validateSearch: () => null as unknown as { root?: boolean },\n// })\n\n// const aRoute = new Route({\n//   getParentRoute: () => rootRoute,\n//   path: 'a',\n//   validateSearch: () => null as unknown as { a?: string },\n// })\n\n// const bRoute = new Route({\n//   getParentRoute: () => aRoute,\n//   path: 'b',\n// })\n\n// const rootIsRoot = rootRoute.isRoot\n// //    ^?\n// const aIsRoot = aRoute.isRoot\n// //    ^?\n\n// const rId = rootRoute.id\n// //    ^?\n// const aId = aRoute.id\n// //    ^?\n// const bId = bRoute.id\n// //    ^?\n\n// const rPath = rootRoute.fullPath\n// //    ^?\n// const aPath = aRoute.fullPath\n// //    ^?\n// const bPath = bRoute.fullPath\n// //    ^?\n\n// const rSearch = rootRoute.__types.fullSearchSchema\n// //    ^?\n// const aSearch = aRoute.__types.fullSearchSchema\n// //    ^?\n// const bSearch = bRoute.__types.fullSearchSchema\n// //    ^?\n\n// const config = rootRoute.addChildren([aRoute.addChildren([bRoute])])\n// //    ^?\n", "import { decode, encode } from './qss'\nimport { AnySearchSchema } from './route'\n\nexport const defaultParseSearch = parseSearchWith(JSON.parse)\nexport const defaultStringifySearch = stringifySearchWith(JSON.stringify)\n\nexport function parseSearchWith(parser: (str: string) => any) {\n  return (searchStr: string): AnySearchSchema => {\n    if (searchStr.substring(0, 1) === '?') {\n      searchStr = searchStr.substring(1)\n    }\n\n    let query: Record<string, unknown> = decode(searchStr)\n\n    // Try to parse any query params that might be json\n    for (let key in query) {\n      const value = query[key]\n      if (typeof value === 'string') {\n        try {\n          query[key] = parser(value)\n        } catch (err) {\n          //\n        }\n      }\n    }\n\n    return query\n  }\n}\n\nexport function stringifySearchWith(stringify: (search: any) => string) {\n  return (search: Record<string, any>) => {\n    search = { ...search }\n\n    if (search) {\n      Object.keys(search).forEach((key) => {\n        const val = search[key]\n        if (typeof val === 'undefined' || val === undefined) {\n          delete search[key]\n        } else if (val && typeof val === 'object' && val !== null) {\n          try {\n            search[key] = stringify(val)\n          } catch (err) {\n            // silent\n          }\n        }\n      })\n    }\n\n    const searchStr = encode(search as Record<string, string>).toString()\n\n    return searchStr ? `?${searchStr}` : ''\n  }\n}\n", "import { Store } from '@tanstack/react-store'\nimport invariant from 'tiny-invariant'\n\n//\n\nimport {\n  LinkInfo,\n  LinkOptions,\n  NavigateOptions,\n  ToOptions,\n  ResolveRelativePath,\n} from './link'\nimport {\n  cleanPath,\n  interpolatePath,\n  joinPaths,\n  matchPathname,\n  parsePathname,\n  resolvePath,\n  trimPath,\n  trimPathLeft,\n  trimPathRight,\n} from './path'\nimport {\n  Route,\n  AnySearchSchema,\n  AnyRoute,\n  RootRoute,\n  AnyContext,\n  AnyRootRoute,\n  AnyPathParams,\n} from './route'\nimport {\n  RoutesInfo,\n  AnyRoutesInfo,\n  RoutesById,\n  RoutesByPath,\n} from './routeInfo'\nimport { AnyRouteMatch, RouteMatch, RouteMatchState } from './routeMatch'\nimport { defaultParseSearch, defaultStringifySearch } from './searchParams'\nimport {\n  functionalUpdate,\n  last,\n  NoInfer,\n  pick,\n  PickAsRequired,\n  Timeout,\n  Updater,\n  replaceEqualDeep,\n  partialDeepEqual,\n} from './utils'\nimport {\n  createBrowserHistory,\n  createMemoryHistory,\n  RouterHistory,\n} from './history'\nimport { RouteComponent } from './react'\n\n//\n\ndeclare global {\n  interface Window {\n    __TSR_DEHYDRATED__?: HydrationCtx\n  }\n}\n\nexport interface Register {\n  // router: Router\n}\n\nexport type AnyRouter = Router<any, any, any>\n\nexport type RegisteredRouter = Register extends {\n  router: Router<infer TRoute, infer TRoutesInfo>\n}\n  ? Router<TRoute, TRoutesInfo>\n  : Router\n\nexport type RegisteredRoutesInfo = Register extends {\n  router: Router<infer TRoute, infer TRoutesInfo>\n}\n  ? TRoutesInfo\n  : AnyRoutesInfo\n\nexport interface LocationState {}\n\nexport interface ParsedLocation<\n  TSearchObj extends AnySearchSchema = {},\n  TState extends LocationState = LocationState,\n> {\n  href: string\n  pathname: string\n  search: TSearchObj\n  searchStr: string\n  state: TState\n  hash: string\n  key?: string\n}\n\nexport interface FromLocation {\n  pathname: string\n  search?: unknown\n  key?: string\n  hash?: string\n}\n\nexport type SearchSerializer = (searchObj: Record<string, any>) => string\nexport type SearchParser = (searchStr: string) => Record<string, any>\n\nexport type HydrationCtx = {\n  router: DehydratedRouter\n  payload: Record<string, any>\n}\n\ntype RouterContextOptions<TRouteTree extends AnyRoute> =\n  AnyContext extends TRouteTree['__types']['routerContext']\n    ? {\n        context?: TRouteTree['__types']['routerContext']\n      }\n    : {\n        context: TRouteTree['__types']['routerContext']\n      }\n\nexport interface RouterOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any>,\n> {\n  history?: RouterHistory\n  stringifySearch?: SearchSerializer\n  parseSearch?: SearchParser\n  defaultPreload?: false | 'intent'\n  defaultPreloadDelay?: number\n  defaultComponent?: RouteComponent\n  defaultErrorComponent?: RouteComponent<{\n    error: Error\n    info: { componentStack: string }\n  }>\n  defaultPendingComponent?: RouteComponent\n  defaultLoaderMaxAge?: number\n  defaultLoaderGcMaxAge?: number\n  caseSensitive?: boolean\n  routeTree?: TRouteTree\n  basepath?: string\n  createRoute?: (opts: { route: AnyRoute; router: AnyRouter }) => void\n  onRouteChange?: () => void\n  fetchServerDataFn?: FetchServerDataFn\n  context?: TRouteTree['__types']['routerContext']\n  Wrap?: React.ComponentType<{ children: React.ReactNode }>\n  dehydrate?: () => TDehydrated\n  hydrate?: (dehydrated: TDehydrated) => void\n}\n\ntype FetchServerDataFn = (ctx: {\n  router: AnyRouter\n  routeMatch: RouteMatch\n}) => Promise<any>\n\nexport interface RouterState<\n  TRoutesInfo extends AnyRoutesInfo = AnyRoutesInfo,\n  TState extends LocationState = LocationState,\n> {\n  status: 'idle' | 'pending'\n  matches: RouteMatch<TRoutesInfo, TRoutesInfo['routeIntersection']>[]\n  location: ParsedLocation<TRoutesInfo['fullSearchSchema'], TState>\n  resolvedLocation: ParsedLocation<TRoutesInfo['fullSearchSchema'], TState>\n  lastUpdated: number\n}\n\nexport type ListenerFn = () => void\n\nexport interface BuildNextOptions {\n  to?: string | number | null\n  params?: true | Updater<unknown>\n  search?: true | Updater<unknown>\n  hash?: true | Updater<string>\n  state?: LocationState\n  key?: string\n  from?: string\n  fromCurrent?: boolean\n  __matches?: RouteMatch[]\n}\n\nexport type MatchCacheEntry = {\n  gc: number\n  match: RouteMatch\n}\n\nexport interface MatchLocation {\n  to?: string | number | null\n  fuzzy?: boolean\n  caseSensitive?: boolean\n  from?: string\n  fromCurrent?: boolean\n}\n\nexport interface MatchRouteOptions {\n  pending?: boolean\n  caseSensitive?: boolean\n  includeSearch?: boolean\n  fuzzy?: boolean\n}\n\ntype LinkCurrentTargetElement = {\n  preloadTimeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport interface DehydratedRouterState\n  extends Pick<RouterState, 'status' | 'location' | 'lastUpdated'> {\n  // matches: DehydratedRouteMatch[]\n}\n\nexport interface DehydratedRouter {\n  state: DehydratedRouterState\n}\n\nexport type MatchCache = Record<string, MatchCacheEntry>\n\ninterface DehydratedRouteMatch {\n  id: string\n  promiseKeys: string[]\n  // state: Pick<RouteMatchState<any, any>, 'status'>\n}\n\nexport const defaultFetchServerDataFn: FetchServerDataFn = async ({\n  router,\n  routeMatch,\n}) => {\n  const next = router.buildNext({\n    to: '.',\n    search: (d: any) => ({\n      ...(d ?? {}),\n      __data: {\n        matchId: routeMatch.id,\n      },\n    }),\n  })\n\n  const res = await fetch(next.href, {\n    method: 'GET',\n    signal: routeMatch.abortController.signal,\n  })\n\n  if (res.ok) {\n    return res.json()\n  }\n\n  throw new Error('Failed to fetch match data')\n}\n\nexport type RouterConstructorOptions<\n  TRouteTree extends AnyRoute,\n  TDehydrated extends Record<string, any>,\n> = Omit<RouterOptions<TRouteTree, TDehydrated>, 'context'> &\n  RouterContextOptions<TRouteTree>\n\nexport class Router<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TRoutesInfo extends AnyRoutesInfo = RoutesInfo<TRouteTree>,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> {\n  types!: {\n    // Super secret internal stuff\n    RootRoute: TRouteTree\n    RoutesInfo: TRoutesInfo\n  }\n\n  options: PickAsRequired<\n    RouterOptions<TRouteTree, TDehydrated>,\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n  context!: NonNullable<TRouteTree['__types']['routerContext']>\n  history!: RouterHistory\n  #unsubHistory?: () => void\n  basepath!: string\n  // __location: Location<TRoutesInfo['fullSearchSchema']>\n  routeTree!: RootRoute\n  routesById!: RoutesById<TRoutesInfo>\n  routesByPath!: RoutesByPath<TRoutesInfo>\n  flatRoutes!: TRoutesInfo['routesByFullPath'][keyof TRoutesInfo['routesByFullPath']][]\n  navigateTimeout: undefined | Timeout\n  nextAction: undefined | 'push' | 'replace'\n  navigationPromise: undefined | Promise<void>\n\n  __store: Store<RouterState<TRoutesInfo>>\n  state: RouterState<TRoutesInfo>\n  startedLoadingAt = Date.now()\n  resolveNavigation: () => void = () => {}\n\n  constructor(options?: RouterConstructorOptions<TRouteTree, TDehydrated>) {\n    this.options = {\n      defaultPreloadDelay: 50,\n      context: undefined!,\n      ...options,\n      stringifySearch: options?.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options?.parseSearch ?? defaultParseSearch,\n      fetchServerDataFn: options?.fetchServerDataFn ?? defaultFetchServerDataFn,\n    }\n\n    this.__store = new Store<RouterState<TRoutesInfo>>(\n      getInitialRouterState(),\n      {\n        onUpdate: () => {\n          this.state = this.__store.state\n        },\n      },\n    )\n    this.state = this.__store.state\n\n    this.update(options)\n\n    const next = this.buildNext({\n      hash: true,\n      fromCurrent: true,\n      search: true,\n      state: true,\n    })\n\n    if (this.state.location.href !== next.href) {\n      this.#commitLocation({ ...next, replace: true })\n    }\n  }\n\n  reset = () => {\n    this.__store.setState((s) => Object.assign(s, getInitialRouterState()))\n  }\n\n  mount = () => {\n    // Mount only does anything on the client\n    if (!isServer) {\n      // If the router matches are empty, start loading the matches\n      if (!this.state.matches.length) {\n        this.safeLoad()\n      }\n    }\n\n    return () => {}\n  }\n\n  update = (opts?: RouterOptions<any, any>): this => {\n    Object.assign(this.options, opts)\n\n    this.context = this.options.context\n\n    if (\n      !this.history ||\n      (this.options.history && this.options.history !== this.history)\n    ) {\n      if (this.#unsubHistory) {\n        this.#unsubHistory()\n      }\n\n      this.history =\n        this.options.history ??\n        (isServer ? createMemoryHistory() : createBrowserHistory()!)\n\n      const parsedLocation = this.#parseLocation()\n\n      this.__store.setState((s) => ({\n        ...s,\n        resolvedLocation: parsedLocation,\n        location: parsedLocation,\n      }))\n\n      this.#unsubHistory = this.history.listen(() => {\n        this.safeLoad({\n          next: this.#parseLocation(this.state.location),\n        })\n      })\n    }\n\n    const { basepath, routeTree } = this.options\n\n    this.basepath = `/${trimPath(basepath ?? '') ?? ''}`\n\n    if (routeTree && routeTree !== this.routeTree) {\n      this.#buildRouteTree(routeTree)\n    }\n\n    return this\n  }\n\n  buildNext = (opts: BuildNextOptions): ParsedLocation => {\n    const next = this.#buildLocation(opts)\n\n    const __matches = this.matchRoutes(next.pathname, next.search)\n\n    return this.#buildLocation({\n      ...opts,\n      __matches,\n    })\n  }\n\n  cancelMatches = () => {\n    ;[...this.state.matches].forEach((match) => {\n      match.cancel()\n    })\n  }\n\n  safeLoad = (opts?: { next?: ParsedLocation }) => {\n    this.load(opts).catch((err) => {\n      console.warn(err)\n      invariant(false, 'Encountered an error during router.load()! ☝️.')\n    })\n  }\n\n  load = async (opts?: { next?: ParsedLocation }): Promise<void> => {\n    this.#createNavigationPromise()\n\n    let now = Date.now()\n    const startedAt = now\n    this.startedLoadingAt = startedAt\n\n    // Cancel any pending matches\n    this.cancelMatches()\n\n    let matches!: RouteMatch<any, any>[]\n\n    this.__store.batch(() => {\n      if (opts?.next) {\n        // Ingest the new location\n        this.__store.setState((s) => ({\n          ...s,\n          location: opts.next!,\n        }))\n      }\n\n      // Match the routes\n      matches = this.matchRoutes(\n        this.state.location.pathname,\n        this.state.location.search,\n        {\n          strictParseParams: true,\n          debug: true,\n        },\n      )\n\n      this.__store.setState((s) => ({\n        ...s,\n        status: 'pending',\n        matches,\n      }))\n    })\n\n    matches.forEach((match) => {\n      match.__commit()\n    })\n\n    // Load the matches\n    await this.loadMatches(matches, this.state.location)\n\n    if (this.startedLoadingAt !== startedAt) {\n      // Ignore side-effects of outdated side-effects\n      return this.navigationPromise\n    }\n\n    const previousMatches = this.state.matches\n\n    const exiting: AnyRouteMatch[] = [],\n      staying: AnyRouteMatch[] = []\n\n    previousMatches.forEach((d) => {\n      if (matches.find((dd) => dd.id === d.id)) {\n        staying.push(d)\n      } else {\n        exiting.push(d)\n      }\n    })\n\n    const entering = matches.filter((d) => {\n      return !previousMatches.find((dd) => dd.id === d.id)\n    })\n\n    now = Date.now()\n\n    exiting.forEach((d) => {\n      d.__onExit?.({\n        params: d.params,\n        search: d.state.routeSearch,\n      })\n\n      // Clear non-loading error states when match leaves\n      if (d.state.status === 'error') {\n        this.__store.setState((s) => ({\n          ...s,\n          status: 'idle',\n          error: undefined,\n        }))\n      }\n    })\n\n    staying.forEach((d) => {\n      d.route.options.onTransition?.({\n        params: d.params,\n        search: d.state.routeSearch,\n      })\n    })\n\n    entering.forEach((d) => {\n      d.__onExit = d.route.options.onLoaded?.({\n        params: d.params,\n        search: d.state.search,\n      })\n    })\n\n    const prevLocation = this.state.location\n\n    this.__store.setState((s) => ({\n      ...s,\n      status: 'idle',\n      resolvedLocation: s.location,\n      matches,\n    }))\n\n    if (prevLocation!.href !== this.state.location.href) {\n      this.options.onRouteChange?.()\n    }\n\n    this.resolveNavigation()\n  }\n\n  getRoute = <TId extends keyof TRoutesInfo['routesById']>(\n    id: TId,\n  ): TRoutesInfo['routesById'][TId] => {\n    const route = this.routesById[id]\n\n    invariant(route, `Route with id \"${id as string}\" not found`)\n\n    return route\n  }\n\n  loadRoute = async (\n    navigateOpts: BuildNextOptions = this.state.location,\n  ): Promise<RouteMatch[]> => {\n    const next = this.buildNext(navigateOpts)\n    const matches = this.matchRoutes(next.pathname, next.search, {\n      strictParseParams: true,\n    })\n    await this.loadMatches(matches, next)\n    return matches\n  }\n\n  preloadRoute = async (\n    navigateOpts: BuildNextOptions = this.state.location,\n  ) => {\n    const next = this.buildNext(navigateOpts)\n    const matches = this.matchRoutes(next.pathname, next.search, {\n      strictParseParams: true,\n    })\n\n    await this.loadMatches(matches, next, {\n      preload: true,\n    })\n    return matches\n  }\n\n  matchRoutes = (\n    pathname: string,\n    search: AnySearchSchema,\n    opts?: { strictParseParams?: boolean; debug?: boolean },\n  ): RouteMatch[] => {\n    // If there's no route tree, we can't match anything\n    if (!this.flatRoutes.length) {\n      return []\n    }\n\n    let routeParams: AnyPathParams = {}\n\n    let foundRoute = this.flatRoutes.find((route) => {\n      const matchedParams = matchPathname(this.basepath, pathname, {\n        to: route.fullPath,\n        caseSensitive:\n          route.options.caseSensitive ?? this.options.caseSensitive,\n      })\n\n      if (matchedParams) {\n        routeParams = matchedParams\n        return true\n      }\n\n      return false\n    })\n\n    if (!foundRoute) {\n      return []\n    }\n\n    let matchedRoutes: AnyRoute[] = [foundRoute]\n\n    while (foundRoute?.parentRoute) {\n      foundRoute = foundRoute.parentRoute\n      if (foundRoute) matchedRoutes.unshift(foundRoute)\n    }\n\n    // Alright, by now we should have all of our\n    // matching routes and their param pairs, let's\n    // Turn them into actual `Match` objects and\n    // accumulate the params into a single params bag\n    let allParams = {}\n\n    // Existing matches are matches that are already loaded along with\n    // pending matches that are still loading\n    const existingMatches = [...this.state.matches] as AnyRouteMatch[]\n\n    const matches = matchedRoutes\n      .map((route) => {\n        let parsedParams\n        try {\n          parsedParams =\n            route.options.parseParams?.(routeParams!) ?? routeParams\n        } catch (err) {\n          if (opts?.strictParseParams) {\n            throw err\n          }\n        }\n\n        // Add the parsed params to the accumulated params bag\n        Object.assign(allParams, parsedParams)\n\n        const interpolatedPath = interpolatePath(route.path, allParams)\n        const matchId =\n          interpolatePath(route.id, allParams, true) +\n          (route.options.getKey?.({\n            params: allParams,\n            search,\n          }) ?? '')\n\n        // Waste not, want not. If we already have a match for this route,\n        // reuse it. This is important for layout routes, which might stick\n        // around between navigation actions that only change leaf routes.\n        const existingMatch = existingMatches.find((d) => d.id === matchId)\n\n        if (existingMatch) {\n          return existingMatch\n        }\n\n        return new RouteMatch(this, route, {\n          id: matchId,\n          params: allParams,\n          pathname: joinPaths([this.basepath, interpolatedPath]),\n        }) as AnyRouteMatch\n      })\n      .filter((d, i, all) => {\n        // Filter out any duplicate matches\n        // I honesty don't know why this is necessary, but it is and it's safe for now\n        // Someday someone will figure out why my logic is wrong and fix it to just\n        // not create duplicate matches in the first place\n        return all.findIndex((dd) => dd.id === d.id) === i\n      })\n\n    return matches\n  }\n\n  loadMatches = async (\n    resolvedMatches: RouteMatch[],\n    location: ParsedLocation,\n    opts?: {\n      preload?: boolean\n      // filter?: (match: RouteMatch<any, any>) => any\n    },\n  ) => {\n    let firstBadMatchIndex: number | undefined\n\n    // Check each match middleware to see if the route can be accessed\n    try {\n      await Promise.all(\n        resolvedMatches.map(async (match, index) => {\n          try {\n            await match.route.options.beforeLoad?.({\n              router: this as any,\n              match,\n            })\n          } catch (err) {\n            if (isRedirect(err)) {\n              throw err\n            }\n\n            firstBadMatchIndex = firstBadMatchIndex ?? index\n\n            const errorHandler =\n              match.route.options.onBeforeLoadError ??\n              match.route.options.onError\n            try {\n              errorHandler?.(err)\n            } catch (errorHandlerErr) {\n              if (isRedirect(errorHandlerErr)) {\n                throw errorHandlerErr\n              }\n\n              match.__store.setState((s) => ({\n                ...s,\n                error: errorHandlerErr,\n                status: 'error',\n                updatedAt: Date.now(),\n              }))\n              return\n            }\n\n            match.__store.setState((s) => ({\n              ...s,\n              error: err,\n              status: 'error',\n              updatedAt: Date.now(),\n            }))\n          }\n        }),\n      )\n    } catch (err) {\n      if (isRedirect(err)) {\n        if (!opts?.preload) {\n          this.navigate(err as any)\n        }\n        return\n      }\n\n      throw err // we should never end up here\n    }\n\n    const validResolvedMatches = resolvedMatches.slice(0, firstBadMatchIndex)\n    const matchPromises = validResolvedMatches.map(async (match, index) => {\n      const parentMatch = validResolvedMatches[index - 1]\n\n      match.__load({ preload: opts?.preload, location, parentMatch })\n\n      await match.__loadPromise\n\n      if (parentMatch) {\n        await parentMatch.__loadPromise\n      }\n    })\n\n    await Promise.all(matchPromises)\n  }\n\n  reload = () => {\n    this.navigate({\n      fromCurrent: true,\n      replace: true,\n      search: true,\n    } as any)\n  }\n\n  resolvePath = (from: string, path: string) => {\n    return resolvePath(this.basepath!, from, cleanPath(path))\n  }\n\n  navigate = async <TFrom extends string = '/', TTo extends string = ''>({\n    from,\n    to = '' as any,\n    search,\n    hash,\n    replace,\n    params,\n  }: NavigateOptions<TRoutesInfo, TFrom, TTo>) => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n    const toString = String(to)\n    const fromString = typeof from === 'undefined' ? from : String(from)\n    let isExternal\n\n    try {\n      new URL(`${toString}`)\n      isExternal = true\n    } catch (e) {}\n\n    invariant(\n      !isExternal,\n      'Attempting to navigate to external url with this.navigate!',\n    )\n\n    return this.#commitLocation({\n      from: fromString,\n      to: toString,\n      search,\n      hash,\n      replace,\n      params,\n    })\n  }\n\n  matchRoute = <\n    TFrom extends string = '/',\n    TTo extends string = '',\n    TResolved extends string = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n  >(\n    location: ToOptions<TRoutesInfo, TFrom, TTo>,\n    opts?: MatchRouteOptions,\n  ): false | TRoutesInfo['routesById'][TResolved]['__types']['allParams'] => {\n    location = {\n      ...location,\n      to: location.to\n        ? this.resolvePath(location.from ?? '', location.to)\n        : undefined,\n    } as any\n\n    const next = this.buildNext(location)\n    if (opts?.pending && this.state.status !== 'pending') {\n      return false\n    }\n\n    const baseLocation = opts?.pending\n      ? this.state.location\n      : this.state.resolvedLocation\n\n    if (!baseLocation) {\n      return false\n    }\n\n    const match = matchPathname(this.basepath, baseLocation.pathname, {\n      ...opts,\n      to: next.pathname,\n    }) as any\n\n    if (!match) {\n      return false\n    }\n\n    if (opts?.includeSearch ?? true) {\n      return partialDeepEqual(baseLocation.search, next.search) ? match : false\n    }\n\n    return match\n  }\n\n  buildLink = <TFrom extends string = '/', TTo extends string = ''>({\n    from,\n    to = '.' as any,\n    search,\n    params,\n    hash,\n    target,\n    replace,\n    activeOptions,\n    preload,\n    preloadDelay: userPreloadDelay,\n    disabled,\n  }: LinkOptions<TRoutesInfo, TFrom, TTo>): LinkInfo => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n\n    try {\n      new URL(`${to}`)\n      return {\n        type: 'external',\n        href: to,\n      }\n    } catch (e) {}\n\n    const nextOpts = {\n      from,\n      to,\n      search,\n      params,\n      hash,\n      replace,\n    }\n\n    const next = this.buildNext(nextOpts)\n\n    preload = preload ?? this.options.defaultPreload\n    const preloadDelay =\n      userPreloadDelay ?? this.options.defaultPreloadDelay ?? 0\n\n    // Compare path/hash for matches\n    const currentPathSplit = this.state.location.pathname.split('/')\n    const nextPathSplit = next.pathname.split('/')\n    const pathIsFuzzyEqual = nextPathSplit.every(\n      (d, i) => d === currentPathSplit[i],\n    )\n    // Combine the matches based on user options\n    const pathTest = activeOptions?.exact\n      ? this.state.location.pathname === next.pathname\n      : pathIsFuzzyEqual\n    const hashTest = activeOptions?.includeHash\n      ? this.state.location.hash === next.hash\n      : true\n    const searchTest =\n      activeOptions?.includeSearch ?? true\n        ? partialDeepEqual(this.state.location.search, next.search)\n        : true\n\n    // The final \"active\" test\n    const isActive = pathTest && hashTest && searchTest\n\n    // The click handler\n    const handleClick = (e: MouseEvent) => {\n      if (\n        !disabled &&\n        !isCtrlEvent(e) &&\n        !e.defaultPrevented &&\n        (!target || target === '_self') &&\n        e.button === 0\n      ) {\n        e.preventDefault()\n\n        // All is well? Navigate!\n        this.#commitLocation(nextOpts as any)\n      }\n    }\n\n    // The click handler\n    const handleFocus = (e: MouseEvent) => {\n      if (preload) {\n        this.preloadRoute(nextOpts).catch((err) => {\n          console.warn(err)\n          console.warn('Error preloading route! ☝️')\n        })\n      }\n    }\n\n    const handleTouchStart = (e: TouchEvent) => {\n      this.preloadRoute(nextOpts).catch((err) => {\n        console.warn(err)\n        console.warn('Error preloading route! ☝️')\n      })\n    }\n\n    const handleEnter = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (preload) {\n        if (target.preloadTimeout) {\n          return\n        }\n\n        target.preloadTimeout = setTimeout(() => {\n          target.preloadTimeout = null\n          this.preloadRoute(nextOpts).catch((err) => {\n            console.warn(err)\n            console.warn('Error preloading route! ☝️')\n          })\n        }, preloadDelay)\n      }\n    }\n\n    const handleLeave = (e: MouseEvent) => {\n      const target = (e.target || {}) as LinkCurrentTargetElement\n\n      if (target.preloadTimeout) {\n        clearTimeout(target.preloadTimeout)\n        target.preloadTimeout = null\n      }\n    }\n\n    return {\n      type: 'internal',\n      next,\n      handleFocus,\n      handleClick,\n      handleEnter,\n      handleLeave,\n      handleTouchStart,\n      isActive,\n      disabled,\n    }\n  }\n\n  dehydrate = (): DehydratedRouter => {\n    return {\n      state: {\n        ...pick(this.state, ['location', 'status', 'lastUpdated']),\n        // matches: this.state.matches.map((m) => ({\n        //   id: m.id,\n        //   promiseKeys: Object.keys(m.__promisesByKey),\n        // })),\n      },\n    }\n  }\n\n  hydrate = async (__do_not_use_server_ctx?: HydrationCtx) => {\n    let _ctx = __do_not_use_server_ctx\n    // Client hydrates from window\n    if (typeof document !== 'undefined') {\n      _ctx = window.__TSR_DEHYDRATED__\n    }\n\n    invariant(\n      _ctx,\n      'Expected to find a __TSR_DEHYDRATED__ property on window... but we did not. Did you forget to render <DehydrateRouter /> in your app?',\n    )\n\n    const ctx = _ctx\n\n    this.options.hydrate?.(ctx.payload as any)\n\n    this.__store.setState((s) => {\n      return {\n        ...s,\n        ...ctx.router.state,\n        matches: s.matches,\n        resolvedLocation: ctx.router.state.location,\n      }\n    })\n\n    await this.load()\n\n    // this.state.matches.forEach((m) => {\n    //   m.__promiseKeys =\n    //     ctx.router.state.matches.find((d) => d.id === m.id)?.promiseKeys ?? []\n    // })\n\n    return\n  }\n\n  injectedHtml: (string | (() => Promise<string> | string))[] = []\n\n  injectHtml = async (html: string | (() => Promise<string> | string)) => {\n    this.injectedHtml.push(html)\n  }\n\n  dehydrateData = <T>(key: any, getData: T | (() => Promise<T> | T)) => {\n    if (typeof document === 'undefined') {\n      const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n      this.injectHtml(async () => {\n        const data =\n          typeof getData === 'function' ? await (getData as any)() : getData\n        return `<script>window[\"__TSR__DEHYRATED__${escapeJSON(\n          strKey,\n        )}\"] = ${JSON.stringify(data)}</script>`\n      })\n\n      return () => this.hydrateData<T>(key)\n    }\n\n    return () => undefined\n  }\n\n  hydrateData = <T = unknown>(key: any) => {\n    if (typeof document !== 'undefined') {\n      const strKey = typeof key === 'string' ? key : JSON.stringify(key)\n\n      return window[`__TSR__DEHYRATED__${strKey}` as any] as T\n    }\n\n    return undefined\n  }\n\n  // resolveMatchPromise = (matchId: string, key: string, value: any) => {\n  //   this.state.matches\n  //     .find((d) => d.id === matchId)\n  //     ?.__promisesByKey[key]?.resolve(value)\n  // }\n\n  #buildRouteTree = (routeTree: TRouteTree) => {\n    this.routeTree = routeTree as any\n    this.routesById = {} as any\n    this.routesByPath = {} as any\n    this.flatRoutes = [] as any\n\n    const recurseRoutes = (routes: AnyRoute[]) => {\n      routes.forEach((route, i) => {\n        route.init({ originalIndex: i, router: this })\n\n        const existingRoute = (this.routesById as any)[route.id]\n\n        invariant(\n          !existingRoute,\n          `Duplicate routes found with id: ${String(route.id)}`,\n        )\n        ;(this.routesById as any)[route.id] = route\n\n        if (!route.isRoot && route.path) {\n          const trimmedFullPath = trimPathRight(route.fullPath)\n          if (\n            !this.routesByPath[trimmedFullPath] ||\n            route.fullPath.endsWith('/')\n          ) {\n            ;(this.routesByPath as any)[trimmedFullPath] = route\n          }\n        }\n\n        const children = route.children as Route[]\n\n        if (children?.length) {\n          recurseRoutes(children)\n        }\n      })\n    }\n\n    recurseRoutes([routeTree])\n\n    this.flatRoutes = (Object.values(this.routesByPath) as AnyRoute[])\n      .map((d, i) => {\n        const trimmed = trimPath(d.fullPath)\n        const parsed = parsePathname(trimmed)\n\n        while (parsed.length > 1 && parsed[0]?.value === '/') {\n          parsed.shift()\n        }\n\n        const score = parsed.map((d) => {\n          if (d.type === 'param') {\n            return 0.5\n          }\n\n          if (d.type === 'wildcard') {\n            return 0.25\n          }\n\n          return 1\n        })\n\n        return { child: d, trimmed, parsed, index: i, score }\n      })\n      .sort((a, b) => {\n        let isIndex = a.trimmed === '/' ? 1 : b.trimmed === '/' ? -1 : 0\n\n        if (isIndex !== 0) return isIndex\n\n        const length = Math.min(a.score.length, b.score.length)\n\n        // Sort by length of score\n        if (a.score.length !== b.score.length) {\n          return b.score.length - a.score.length\n        }\n\n        // Sort by min available score\n        for (let i = 0; i < length; i++) {\n          if (a.score[i] !== b.score[i]) {\n            return b.score[i]! - a.score[i]!\n          }\n        }\n\n        // Sort by min available parsed value\n        for (let i = 0; i < length; i++) {\n          if (a.parsed[i]!.value !== b.parsed[i]!.value) {\n            return a.parsed[i]!.value! > b.parsed[i]!.value! ? 1 : -1\n          }\n        }\n\n        // Sort by length of trimmed full path\n        if (a.trimmed !== b.trimmed) {\n          return a.trimmed > b.trimmed ? 1 : -1\n        }\n\n        // Sort by original index\n        return a.index - b.index\n      })\n      .map((d, i) => {\n        d.child.rank = i\n        return d.child\n      }) as any\n  }\n\n  #parseLocation = (previousLocation?: ParsedLocation): ParsedLocation => {\n    let { pathname, search, hash, state } = this.history.location\n\n    const parsedSearch = this.options.parseSearch(search)\n\n    return {\n      pathname: pathname,\n      searchStr: search,\n      search: replaceEqualDeep(previousLocation?.search, parsedSearch),\n      hash: hash.split('#').reverse()[0] ?? '',\n      href: `${pathname}${search}${hash}`,\n      state: state as LocationState,\n      key: state?.key || '__init__',\n    }\n  }\n\n  #buildLocation = (dest: BuildNextOptions = {}): ParsedLocation => {\n    dest.fromCurrent = dest.fromCurrent ?? dest.to === ''\n\n    const fromPathname = dest.fromCurrent\n      ? this.state.location.pathname\n      : dest.from ?? this.state.location.pathname\n\n    let pathname = resolvePath(\n      this.basepath ?? '/',\n      fromPathname,\n      `${dest.to ?? ''}`,\n    )\n\n    const fromMatches = this.matchRoutes(\n      this.state.location.pathname,\n      this.state.location.search,\n      {\n        strictParseParams: true,\n      },\n    )\n\n    const prevParams = { ...last(fromMatches)?.params }\n\n    let nextParams =\n      (dest.params ?? true) === true\n        ? prevParams\n        : functionalUpdate(dest.params!, prevParams)\n\n    if (nextParams) {\n      dest.__matches\n        ?.map((d) => d.route.options.stringifyParams)\n        .filter(Boolean)\n        .forEach((fn) => {\n          nextParams = { ...nextParams!, ...fn!(nextParams!) }\n        })\n    }\n\n    pathname = interpolatePath(pathname, nextParams ?? {})\n\n    const preSearchFilters =\n      dest.__matches\n        ?.map((match) => match.route.options.preSearchFilters ?? [])\n        .flat()\n        .filter(Boolean) ?? []\n\n    const postSearchFilters =\n      dest.__matches\n        ?.map((match) => match.route.options.postSearchFilters ?? [])\n        .flat()\n        .filter(Boolean) ?? []\n\n    // Pre filters first\n    const preFilteredSearch = preSearchFilters?.length\n      ? preSearchFilters?.reduce(\n          (prev, next) => next(prev),\n          this.state.location.search,\n        )\n      : this.state.location.search\n\n    // Then the link/navigate function\n    const destSearch =\n      dest.search === true\n        ? preFilteredSearch // Preserve resolvedFrom true\n        : dest.search\n        ? functionalUpdate(dest.search, preFilteredSearch) ?? {} // Updater\n        : preSearchFilters?.length\n        ? preFilteredSearch // Preserve resolvedFrom filters\n        : {}\n\n    // Then post filters\n    const postFilteredSearch = postSearchFilters?.length\n      ? postSearchFilters.reduce((prev, next) => next(prev), destSearch)\n      : destSearch\n\n    const search = replaceEqualDeep(\n      this.state.location.search,\n      postFilteredSearch,\n    )\n\n    const searchStr = this.options.stringifySearch(search)\n\n    const hash =\n      dest.hash === true\n        ? this.state.location.hash\n        : functionalUpdate(dest.hash!, this.state.location.hash)\n\n    const hashStr = hash ? `#${hash}` : ''\n\n    const nextState =\n      dest.state === true\n        ? this.state.location.state\n        : functionalUpdate(dest.state, this.state.location.state)!\n\n    return {\n      pathname,\n      search,\n      searchStr,\n      state: nextState,\n      hash,\n      href: this.history.createHref(`${pathname}${searchStr}${hashStr}`),\n      key: dest.key,\n    }\n  }\n\n  #commitLocation = async (\n    location: BuildNextOptions & { replace?: boolean },\n  ) => {\n    const next = this.buildNext(location)\n    const id = '' + Date.now() + Math.random()\n\n    if (this.navigateTimeout) clearTimeout(this.navigateTimeout)\n\n    let nextAction: 'push' | 'replace' = 'replace'\n\n    if (!location.replace) {\n      nextAction = 'push'\n    }\n\n    const isSameUrl = this.state.location.href === next.href\n\n    if (isSameUrl && !next.key) {\n      nextAction = 'replace'\n    }\n\n    const href = `${next.pathname}${next.searchStr}${\n      next.hash ? `#${next.hash}` : ''\n    }`\n\n    this.history[nextAction === 'push' ? 'push' : 'replace'](href, {\n      id,\n      ...next.state,\n    })\n\n    return this.#createNavigationPromise()\n  }\n\n  #createNavigationPromise = () => {\n    const previousNavigationResolve = this.resolveNavigation\n\n    this.navigationPromise = new Promise((resolve) => {\n      this.resolveNavigation = () => {\n        resolve()\n        previousNavigationResolve()\n      }\n    })\n\n    return this.navigationPromise\n  }\n}\n\n// Detect if we're in the DOM\nconst isServer = typeof window === 'undefined' || !window.document.createElement\n\nfunction getInitialRouterState(): RouterState<any, any> {\n  return {\n    status: 'idle',\n    resolvedLocation: null!,\n    location: null!,\n    matches: [],\n    lastUpdated: Date.now(),\n  }\n}\n\nfunction isCtrlEvent(e: MouseEvent) {\n  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n}\n\nexport type AnyRedirect = Redirect<any, any, any>\n\nexport type Redirect<\n  TRoutesInfo extends AnyRoutesInfo = RegisteredRoutesInfo,\n  TFrom extends TRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n> = NavigateOptions<TRoutesInfo, TFrom, TTo> & {\n  code?: number\n}\n\nexport function redirect<\n  TRoutesInfo extends AnyRoutesInfo = RegisteredRoutesInfo,\n  TFrom extends TRoutesInfo['routePaths'] = '/',\n  TTo extends string = '',\n>(opts: Redirect<TRoutesInfo, TFrom, TTo>): Redirect<TRoutesInfo, TFrom, TTo> {\n  ;(opts as any).isRedirect = true\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n\nfunction escapeJSON(jsonString: string) {\n  return jsonString\n    .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n    .replace(/'/g, \"\\\\'\") // Escape single quotes\n    .replace(/\"/g, '\\\\\"') // Escape double quotes\n}\n", "import { Store } from '@tanstack/react-store'\n//\nimport { RouteComponent } from './react'\nimport { AnyRoute, Route, StreamedPromise } from './route'\nimport { AnyRoutesInfo, DefaultRoutesInfo } from './routeInfo'\nimport { AnyRouter, isRedirect, ParsedLocation, Router } from './router'\nimport { replaceEqualDeep } from './utils'\n\nexport interface RouteMatchState<\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TRoute extends AnyRoute = Route,\n> {\n  routeSearch: TRoute['__types']['searchSchema']\n  search: TRoutesInfo['fullSearchSchema'] &\n    TRoute['__types']['fullSearchSchema']\n  status: 'pending' | 'success' | 'error'\n  error?: unknown\n  updatedAt: number\n  loader: TRoute['__types']['loader']\n}\n\nconst componentTypes = [\n  'component',\n  'errorComponent',\n  'pendingComponent',\n] as const\n\nexport interface PendingRouteMatchInfo {\n  state: RouteMatchState<any, any>\n  routeContext: {}\n  context: {}\n}\n\nexport interface AnyRouteMatch extends RouteMatch<any, any> {}\n\nexport class RouteMatch<\n  TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo,\n  TRoute extends AnyRoute = AnyRoute,\n> {\n  route!: TRoute\n  router!: Router<TRoutesInfo['routeTree'], TRoutesInfo>\n  __store!: Store<RouteMatchState<TRoutesInfo, TRoute>>\n  state!: RouteMatchState<TRoutesInfo, TRoute>\n  id!: string\n  pathname!: string\n  params!: TRoute['__types']['allParams']\n\n  routeContext?: TRoute['__types']['routeContext']\n  context!: TRoute['__types']['context']\n\n  component?: RouteComponent<{\n    useLoader: TRoute['useLoader']\n    useMatch: TRoute['useMatch']\n    useContext: TRoute['useContext']\n    useSearch: TRoute['useSearch']\n    useParams: TRoute['useParams']\n  }>\n  errorComponent?: RouteComponent<{\n    error: Error\n    info: { componentStack: string }\n  }>\n  pendingComponent?: RouteComponent\n  abortController = new AbortController()\n  parentMatch?: RouteMatch\n  pendingInfo?: PendingRouteMatchInfo\n\n  // __promiseKeys: string[] = []\n  // __promisesByKey: Record<string, StreamedPromise<any>> = {}\n  __loadPromise?: Promise<void>\n  __loadPromiseResolve?: () => void\n  __onExit?:\n    | void\n    | ((matchContext: {\n        params: TRoute['__types']['allParams']\n        search: TRoute['__types']['fullSearchSchema']\n      }) => void)\n\n  constructor(\n    router: AnyRouter,\n    route: TRoute,\n    opts: {\n      id: string\n      params: TRoute['__types']['allParams']\n      pathname: string\n    },\n  ) {\n    Object.assign(this, {\n      route,\n      router,\n      id: opts.id,\n      pathname: opts.pathname,\n      params: opts.params,\n      __store: new Store<RouteMatchState<TRoutesInfo, TRoute>>(\n        {\n          updatedAt: 0,\n          routeSearch: {},\n          search: {} as any,\n          status: 'pending',\n          loader: undefined,\n        },\n        {\n          onUpdate: () => {\n            this.state = this.__store.state\n          },\n        },\n      ),\n    })\n\n    this.state = this.__store.state\n\n    componentTypes.map(async (type) => {\n      const component = this.route.options[type]\n\n      this[type] = component as any\n    })\n\n    this.__loadPromise = new Promise((r) => {\n      this.__loadPromiseResolve = r\n    })\n\n    if (this.state.status === 'pending' && !this.#hasLoaders()) {\n      this.__store.setState((s) => ({\n        ...s,\n        status: 'success',\n      }))\n      this.__loadPromiseResolve?.()\n    }\n  }\n\n  #hasLoaders = () => {\n    return !!(\n      this.route.options.loader ||\n      componentTypes.some((d) => this.route.options[d]?.preload)\n    )\n  }\n\n  __commit = () => {\n    const { routeSearch, search, context, routeContext } = this.#resolveInfo({\n      location: this.router.state.location,\n    })\n    this.context = context\n    this.routeContext = routeContext\n    this.__store.setState((s) => ({\n      ...s,\n      routeSearch: replaceEqualDeep(s.routeSearch, routeSearch),\n      search: replaceEqualDeep(s.search, search),\n    }))\n  }\n\n  cancel = () => {\n    this.abortController?.abort()\n  }\n\n  #resolveSearchInfo = (opts: {\n    location: ParsedLocation\n  }): { routeSearch: {}; search: {} } => {\n    // Validate the search params and stabilize them\n    const parentSearchInfo = this.parentMatch\n      ? this.parentMatch.#resolveSearchInfo(opts)\n      : { search: opts.location.search, routeSearch: opts.location.search }\n\n    try {\n      const validator =\n        typeof this.route.options.validateSearch === 'object'\n          ? this.route.options.validateSearch.parse\n          : this.route.options.validateSearch\n\n      const routeSearch = validator?.(parentSearchInfo.search) ?? {}\n\n      const search = {\n        ...parentSearchInfo.search,\n        ...routeSearch,\n      }\n\n      return {\n        routeSearch,\n        search,\n      }\n    } catch (err: any) {\n      if (isRedirect(err)) {\n        throw err\n      }\n\n      const errorHandler =\n        this.route.options.onValidateSearchError ?? this.route.options.onError\n      errorHandler?.(err)\n      const error = new (Error as any)('Invalid search params found', {\n        cause: err,\n      })\n      error.code = 'INVALID_SEARCH_PARAMS'\n\n      throw error\n    }\n  }\n\n  #resolveInfo = (opts: { location: ParsedLocation }) => {\n    const { search, routeSearch } = this.#resolveSearchInfo(opts)\n\n    try {\n      const routeContext =\n        this.route.options.getContext?.({\n          parentContext: this.parentMatch?.routeContext ?? {},\n          context:\n            this.parentMatch?.context ?? this.router?.options.context ?? {},\n          params: this.params,\n          search,\n        }) || ({} as any)\n\n      const context = {\n        ...(this.parentMatch?.context ?? this.router?.options.context),\n        ...routeContext,\n      } as any\n\n      return {\n        routeSearch,\n        search,\n        context,\n        routeContext,\n      }\n    } catch (err) {\n      this.route.options.onError?.(err)\n      throw err\n    }\n  }\n\n  __load = async (opts: {\n    parentMatch: RouteMatch | undefined\n    preload?: boolean\n    location: ParsedLocation\n  }): Promise<void> => {\n    this.parentMatch = opts.parentMatch\n\n    let info\n\n    try {\n      info = this.#resolveInfo(opts)\n    } catch (err) {\n      if (isRedirect(err)) {\n        if (!opts?.preload) {\n          this.router.navigate(err as any)\n        }\n        return\n      }\n\n      this.__store.setState((s) => ({\n        ...s,\n        status: 'error',\n        error: err,\n      }))\n\n      // Do not proceed with loading the route\n      return\n    }\n\n    const { routeSearch, search, context, routeContext } = info\n\n    const loaderOpts = {\n      params: this.params,\n      routeSearch,\n      search,\n      signal: this.abortController.signal,\n      preload: !!opts?.preload,\n      routeContext,\n      context,\n    }\n\n    this.__loadPromise = Promise.resolve().then(async () => {\n      const loadId = '' + Date.now() + Math.random()\n      this.#latestId = loadId\n\n      const checkLatest = () => {\n        return loadId !== this.#latestId ? this.__loadPromise : undefined\n      }\n\n      let latestPromise\n\n      const componentsPromise = (async () => {\n        // then run all component and data loaders in parallel\n        // For each component type, potentially load it asynchronously\n\n        await Promise.all(\n          componentTypes.map(async (type) => {\n            const component = this.route.options[type]\n\n            if (component?.preload) {\n              await component.preload()\n            }\n          }),\n        )\n      })()\n\n      const loaderPromise = Promise.resolve().then(() => {\n        if (this.route.options.loader) {\n          return this.route.options.loader(loaderOpts)\n        }\n        return\n      })\n\n      try {\n        const [_, loader] = await Promise.all([\n          componentsPromise,\n          loaderPromise,\n        ])\n        if ((latestPromise = checkLatest())) return await latestPromise\n\n        // Object.keys(loader ?? {}).forEach((key) => {\n        //   const value = loader[key]\n        //   if (value instanceof Promise || value?.then) {\n        //     // if (this.__promisesByKey[key]) {\n        //     //   return\n        //     // }\n\n        //     if (typeof document === 'undefined') {\n        //       this.__promisesByKey[key] = {\n        //         status: 'pending',\n        //         promise: value,\n        //         data: undefined,\n        //         resolve: () => {},\n        //       }\n\n        //       value.then((d: any) => {\n        //         this.__promisesByKey[key]!.status = 'resolved'\n        //         this.__promisesByKey[key]!.data = d\n        //       })\n        //     } else {\n        //       const promise = createPromise()\n        //       this.__promisesByKey[key] = {\n        //         status: 'pending',\n        //         promise,\n        //         data: undefined,\n        //         resolve: (d: any) => {\n        //           // @ts-ignore\n        //           promise.resolve()\n        //           this.__promisesByKey[key]!.status = 'resolved'\n        //           this.__promisesByKey[key]!.data = d\n        //         },\n        //       }\n\n        //       if (!this.__promiseKeys.includes(key)) {\n        //         value.then(this.__promisesByKey[key]!.resolve)\n        //       }\n        //     }\n\n        //     loader[key] = this.__promisesByKey[key]\n        //   }\n        // })\n\n        if (!opts.preload) {\n          this.__store.setState((s) => ({\n            ...s,\n            error: undefined,\n            status: 'success',\n            updatedAt: Date.now(),\n            loader,\n          }))\n        }\n      } catch (err) {\n        if (isRedirect(err)) {\n          if (!opts?.preload) {\n            this.router.navigate(err as any)\n          }\n          return\n        }\n\n        const errorHandler =\n          this.route.options.onLoadError ?? this.route.options.onError\n        try {\n          errorHandler?.(err)\n        } catch (errorHandlerErr) {\n          if (isRedirect(errorHandlerErr)) {\n            if (!opts?.preload) {\n              this.router.navigate(errorHandlerErr as any)\n            }\n            return\n          }\n\n          this.__store.setState((s) => ({\n            ...s,\n            error: errorHandlerErr,\n            status: 'error',\n            updatedAt: Date.now(),\n          }))\n          return\n        }\n\n        this.__store.setState((s) => ({\n          ...s,\n          error: err,\n          status: 'error',\n          updatedAt: Date.now(),\n        }))\n      } finally {\n        this.__loadPromiseResolve?.()\n        delete this.__loadPromise\n      }\n    })\n\n    return this.__loadPromise\n  }\n\n  #latestId = ''\n}\n\ntype ResolvablePromise<T> = Promise<T> & { resolve: (data: T) => void }\n\nfunction createPromise<T>() {\n  let resolve: any\n\n  const promise = new Promise((r) => {\n    resolve = r\n  }) as ResolvablePromise<T>\n\n  promise.resolve = (d: any) => {\n    resolve(d)\n  }\n\n  return promise\n}\n"],
  "mappings": "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",
  "names": ["React", "useRef", "useEffect", "useSyncExternalStoreWithSelector", "isProduction", "Store", "constructor", "initialState", "options", "listeners", "Set", "_batching", "_flushing", "subscribe", "listener", "add", "unsub", "onSubscribe", "delete", "setState", "updater", "previous", "state", "updateFn", "onUpdate", "_flush", "flushId", "forEach", "batch", "cb", "useStore", "store", "selector", "d", "slice", "useSyncExternalStoreWithSelector", "subscribe", "state", "shallow", "objA", "objB", "Object", "is", "keysA", "keys", "length", "i", "prototype", "hasOwnProperty", "call", "popStateEvent", "beforeUnloadEvent", "beforeUnloadListener", "event", "preventDefault", "returnValue", "stopBlocking", "removeEventListener", "capture", "createHistory", "opts", "location", "getLocation", "unsub", "listeners", "Set", "blockers", "queue", "tryFlush", "length", "shift", "onUpdate", "queueTask", "task", "push", "forEach", "listener", "listen", "cb", "size", "add", "delete", "path", "state", "pushState", "replace", "replaceState", "go", "index", "back", "forward", "createHref", "str", "block", "addEventListener", "filter", "b", "createBrowserHistory", "getHref", "window", "pathname", "search", "hash", "parseLocation", "history", "key", "createRandomKey", "n", "createHashHistory", "substring", "createMemoryHistory", "initialEntries", "entries", "initialIndex", "currentState", "Math", "min", "href", "hashIndex", "indexOf", "searchIndex", "slice", "undefined", "random", "toString", "last", "arr", "isFunction", "d", "functionalUpdate", "updater", "previous", "pick", "parent", "keys", "reduce", "obj", "replaceEqualDeep", "prev", "_next", "next", "array", "Array", "isArray", "isPlainObject", "prevSize", "Object", "nextItems", "nextSize", "copy", "equalItems", "i", "o", "hasObjectPrototype", "ctor", "constructor", "prot", "prototype", "hasOwnProperty", "call", "partialDeepEqual", "a", "some", "every", "item", "joinPaths", "paths", "cleanPath", "Boolean", "join", "trimPathLeft", "trimPathRight", "trimPath", "resolvePath", "basepath", "base", "to", "RegExp", "baseSegments", "parsePathname", "toSegments", "toSegment", "value", "pop", "joined", "map", "segments", "type", "split", "part", "charAt", "interpolatePath", "params", "leaveWildcards", "interpolatedPathSegments", "segment", "matchPathname", "currentPathname", "matchLocation", "pathParams", "matchByPath", "from", "routeSegments", "startsWith", "unshift", "isMatch", "max", "baseSegment", "routeSegment", "isLastBaseSegment", "isLastRouteSegment", "caseSensitive", "toLowerCase", "fuzzy", "encode", "pfx", "k", "tmp", "encodeURIComponent", "toValue", "mix", "decodeURIComponent", "decode", "out", "concat", "lazy", "importer", "exportName", "lazyComp", "moduleExports", "component", "default", "finalComp", "preload", "useLinkProps", "options", "router", "useRouterContext", "children", "target", "activeProps", "className", "inactiveProps", "activeOptions", "disabled", "preloadDelay", "style", "onClick", "onFocus", "onMouseEnter", "onMouseLeave", "onTouchStart", "rest", "linkInfo", "buildLink", "handleClick", "handleFocus", "handleEnter", "handleLeave", "handleTouchStart", "isActive", "reactHandleClick", "e", "startTransition", "React", "composeHandlers", "handlers", "persist", "handler", "defaultPrevented", "resolvedActiveProps", "resolvedInactiveProps", "role", "Link", "forwardRef", "props", "ref", "linkProps", "Navigate", "useLayoutEffect", "navigate", "matchesContext", "createContext", "routerContext", "useDeferredValue", "RouterProvider", "update", "matches", "useStore", "__store", "s", "useEffect", "mount", "ErrorComponent", "warning", "useContext", "useRouter", "track", "useMatches", "useMatch", "nearestMatch", "match", "find", "route", "id", "invariant", "strict", "useLoader", "matchOpts", "loader", "useSearch", "useParams", "useNavigate", "defaultOpts", "useCallback", "useMatchRoute", "pending", "matchRoute", "MatchRoute", "Outlet", "SubOutlet", "store", "status", "error", "defaultPending", "PendingComponent", "pendingComponent", "defaultPendingComponent", "errorComponent", "defaultErrorComponent", "ResolvedSuspenseBoundary", "wrapInSuspense", "isRoot", "Suspense", "SafeFragment", "ResolvedCatchBoundary", "CatchBoundary", "useInjectHtml", "html", "injectHtml", "useDehydrate", "dehydrate", "data", "dehydrateData", "useHydrate", "hydrate", "hydrateData", "Inner", "__loadPromise", "comp", "defaultComponent", "createElement", "Component", "info", "componentDidCatch", "onCatch", "console", "setState", "render", "CatchBoundaryInner", "activeErrorState", "setActiveErrorState", "useState", "errorState", "prevKeyRef", "useRef", "current", "padding", "maxWidth", "fontSize", "height", "border", "borderRadius", "color", "overflow", "message", "useBlocker", "condition", "unblock", "retry", "cancel", "confirm", "Block", "rootRouteId", "Route", "init", "originalIndex", "allOptions", "parentRoute", "getParentRoute", "customId", "fullPath", "addChildren", "context", "RootRoute", "withRouterContext", "defaultParseSearch", "parseSearchWith", "JSON", "parse", "defaultStringifySearch", "stringifySearchWith", "stringify", "parser", "searchStr", "query", "err", "val", "defaultFetchServerDataFn", "routeMatch", "buildNext", "__data", "matchId", "res", "fetch", "method", "signal", "abortController", "ok", "json", "Error", "Router", "startedLoadingAt", "Date", "now", "resolveNavigation", "reset", "assign", "getInitialRouterState", "isServer", "safeLoad", "parsedLocation", "resolvedLocation", "routeTree", "__matches", "matchRoutes", "cancelMatches", "load", "catch", "warn", "startedAt", "batch", "strictParseParams", "debug", "__commit", "loadMatches", "navigationPromise", "previousMatches", "exiting", "staying", "dd", "entering", "__onExit", "routeSearch", "onTransition", "onLoaded", "prevLocation", "onRouteChange", "getRoute", "routesById", "loadRoute", "navigateOpts", "preloadRoute", "flatRoutes", "routeParams", "foundRoute", "matchedParams", "matchedRoutes", "allParams", "existingMatches", "parsedParams", "parseParams", "interpolatedPath", "getKey", "existingMatch", "RouteMatch", "all", "findIndex", "resolvedMatches", "firstBadMatchIndex", "Promise", "beforeLoad", "isRedirect", "errorHandler", "onBeforeLoadError", "onError", "errorHandlerErr", "updatedAt", "validResolvedMatches", "matchPromises", "parentMatch", "__load", "reload", "fromCurrent", "String", "fromString", "isExternal", "URL", "baseLocation", "includeSearch", "userPreloadDelay", "nextOpts", "defaultPreload", "defaultPreloadDelay", "currentPathSplit", "nextPathSplit", "pathIsFuzzyEqual", "pathTest", "exact", "hashTest", "includeHash", "searchTest", "isCtrlEvent", "button", "preloadTimeout", "setTimeout", "clearTimeout", "__do_not_use_server_ctx", "_ctx", "document", "__TSR_DEHYDRATED__", "ctx", "payload", "injectedHtml", "getData", "strKey", "escapeJSON", "routesByPath", "recurseRoutes", "routes", "existingRoute", "trimmedFullPath", "endsWith", "values", "trimmed", "parsed", "score", "child", "sort", "isIndex", "rank", "previousLocation", "parsedSearch", "parseSearch", "reverse", "dest", "fromPathname", "fromMatches", "prevParams", "nextParams", "stringifyParams", "fn", "preSearchFilters", "flat", "postSearchFilters", "preFilteredSearch", "destSearch", "postFilteredSearch", "stringifySearch", "hashStr", "nextState", "navigateTimeout", "nextAction", "isSameUrl", "previousNavigationResolve", "resolve", "fetchServerDataFn", "Store", "lastUpdated", "metaKey", "altKey", "ctrlKey", "shiftKey", "redirect", "jsonString", "componentTypes", "AbortController", "routeContext", "abort", "parentSearchInfo", "validator", "validateSearch", "onValidateSearchError", "cause", "code", "getContext", "parentContext", "loaderOpts", "then", "loadId", "checkLatest", "latestPromise", "componentsPromise", "loaderPromise", "_", "onLoadError", "__loadPromiseResolve", "r"]
}
