import {
  CheckIcon,
  ComponentBase,
  ExclamationTriangleIcon,
  InfoCircleIcon,
  TimesCircleIcon
} from "./chunk-J3ZVJJFC.js";
import {
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  classNames,
  mergeProps
} from "./chunk-ASNM4D5Y.js";
import {
  require_react
} from "./chunk-ER55EOAS.js";
import {
  __toESM
} from "./chunk-NNPG3NYD.js";

// node_modules/primereact/message/message.esm.js
var React = __toESM(require_react());
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MessageBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Message",
    id: null,
    className: null,
    style: null,
    text: null,
    icon: null,
    severity: "info",
    content: null,
    children: void 0
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var Message = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = MessageBase.getProps(inProps, context);
  var elementRef = React.useRef(null);
  var _MessageBase$setMetaD = MessageBase.setMetaData({
    props
  }), ptm = _MessageBase$setMetaD.ptm;
  var createContent = function createContent2() {
    if (props.content) {
      return ObjectUtils.getJSXElement(props.content, props);
    }
    var text = ObjectUtils.getJSXElement(props.text, props);
    var iconClassName = "p-inline-message-icon";
    var iconProps = mergeProps({
      className: iconClassName
    }, ptm("icon"));
    var icon = props.icon;
    if (!icon) {
      switch (props.severity) {
        case "info":
          icon = React.createElement(InfoCircleIcon, iconProps);
          break;
        case "warn":
          icon = React.createElement(ExclamationTriangleIcon, iconProps);
          break;
        case "error":
          icon = React.createElement(TimesCircleIcon, iconProps);
          break;
        case "success":
          icon = React.createElement(CheckIcon, iconProps);
          break;
      }
    }
    var messageIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, iconProps), {
      props
    });
    var textProps = mergeProps({
      className: "p-inline-message-text"
    }, ptm("text"));
    return React.createElement(React.Fragment, null, messageIcon, React.createElement("span", textProps, text));
  };
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var className = classNames("p-inline-message p-component", {
    "p-inline-message-info": props.severity === "info",
    "p-inline-message-warn": props.severity === "warn",
    "p-inline-message-error": props.severity === "error",
    "p-inline-message-success": props.severity === "success",
    "p-inline-message-icon-only": !props.text
  }, props.className);
  var content = createContent();
  var rootProps = mergeProps({
    id: props.id,
    ref: elementRef,
    className,
    style: props.style,
    role: "alert",
    "aria-live": "polite"
  }, MessageBase.getOtherProps(props), ptm("root"));
  return React.createElement("div", rootProps, content);
}));
Message.displayName = "Message";
export {
  Message
};
//# sourceMappingURL=primereact_message.js.map
