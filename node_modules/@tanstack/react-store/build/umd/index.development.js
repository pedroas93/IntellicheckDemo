/**
 * @tanstack/react-store/src/index.tsx
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('use-sync-external-store/shim/with-selector')) :
  typeof define === 'function' && define.amd ? define(['exports', 'use-sync-external-store/shim/with-selector'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactLoaders = {}, global.withSelector));
})(this, (function (exports, withSelector) { 'use strict';

  /**
   * @tanstack/store/src/index.ts
   *
   * Copyright (c) TanStack
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   */
  class Store {
    listeners = new Set();
    _batching = false;
    _flushing = 0;
    constructor(initialState, options) {
      this.state = initialState;
      this.options = options;
    }
    subscribe = listener => {
      this.listeners.add(listener);
      const unsub = this.options?.onSubscribe?.(listener, this);
      return () => {
        this.listeners.delete(listener);
        unsub?.();
      };
    };
    setState = updater => {
      const previous = this.state;
      this.state = this.options?.updateFn ? this.options.updateFn(previous)(updater) : updater(previous);

      // Always run onUpdate, regardless of batching
      this.options?.onUpdate?.();

      // Attempt to flush
      this._flush();
    };
    _flush = () => {
      if (this._batching) return;
      const flushId = ++this._flushing;
      this.listeners.forEach(listener => {
        if (this._flushing !== flushId) return;
        listener();
      });
    };
    batch = cb => {
      if (this._batching) return cb();
      this._batching = true;
      cb();
      this._batching = false;
      this._flush();
    };
  }

  function useStore(store, selector = d => d) {
    // const isMountedRef = React.useRef(false)
    // const [state, setState] = React.useState<{ ref: TSelected }>({
    //   ref: undefined!,
    // })

    const slice = withSelector.useSyncExternalStoreWithSelector(store.subscribe, () => store.state, () => store.state, selector, shallow);

    // if (!isMountedRef.current) {
    //   state.ref = slice
    // }

    // if (slice !== state.ref) {
    //   setState({ ref: slice })
    // }

    // React.useEffect(() => {
    //   isMountedRef.current = true
    //   return () => {
    //     isMountedRef.current = false
    //   }
    // }, [])

    // return state.ref

    return slice;
  }
  function shallow(objA, objB) {
    if (Object.is(objA, objB)) {
      return true;
    }
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }
    const keysA = Object.keys(objA);
    if (keysA.length !== Object.keys(objB).length) {
      return false;
    }
    for (let i = 0; i < keysA.length; i++) {
      if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }
    return true;
  }

  exports.Store = Store;
  exports.shallow = shallow;
  exports.useStore = useStore;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.development.js.map
