import { Store } from '@tanstack/react-store';
import { RouteComponent } from './react';
import { AnyRoute, Route } from './route';
import { AnyRoutesInfo, DefaultRoutesInfo } from './routeInfo';
import { AnyRouter, ParsedLocation, Router } from './router';
export interface RouteMatchState<TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo, TRoute extends AnyRoute = Route> {
    routeSearch: TRoute['__types']['searchSchema'];
    search: TRoutesInfo['fullSearchSchema'] & TRoute['__types']['fullSearchSchema'];
    status: 'pending' | 'success' | 'error';
    error?: unknown;
    updatedAt: number;
    loader: TRoute['__types']['loader'];
}
export interface PendingRouteMatchInfo {
    state: RouteMatchState<any, any>;
    routeContext: {};
    context: {};
}
export interface AnyRouteMatch extends RouteMatch<any, any> {
}
export declare class RouteMatch<TRoutesInfo extends AnyRoutesInfo = DefaultRoutesInfo, TRoute extends AnyRoute = AnyRoute> {
    #private;
    route: TRoute;
    router: Router<TRoutesInfo['routeTree'], TRoutesInfo>;
    __store: Store<RouteMatchState<TRoutesInfo, TRoute>>;
    state: RouteMatchState<TRoutesInfo, TRoute>;
    id: string;
    pathname: string;
    params: TRoute['__types']['allParams'];
    routeContext?: TRoute['__types']['routeContext'];
    context: TRoute['__types']['context'];
    component?: RouteComponent<{
        useLoader: TRoute['useLoader'];
        useMatch: TRoute['useMatch'];
        useContext: TRoute['useContext'];
        useSearch: TRoute['useSearch'];
        useParams: TRoute['useParams'];
    }>;
    errorComponent?: RouteComponent<{
        error: Error;
        info: {
            componentStack: string;
        };
    }>;
    pendingComponent?: RouteComponent;
    abortController: AbortController;
    parentMatch?: RouteMatch;
    pendingInfo?: PendingRouteMatchInfo;
    __loadPromise?: Promise<void>;
    __loadPromiseResolve?: () => void;
    __onExit?: void | ((matchContext: {
        params: TRoute['__types']['allParams'];
        search: TRoute['__types']['fullSearchSchema'];
    }) => void);
    constructor(router: AnyRouter, route: TRoute, opts: {
        id: string;
        params: TRoute['__types']['allParams'];
        pathname: string;
    });
    __commit: () => void;
    cancel: () => void;
    __load: (opts: {
        parentMatch: RouteMatch | undefined;
        preload?: boolean;
        location: ParsedLocation;
    }) => Promise<void>;
}
