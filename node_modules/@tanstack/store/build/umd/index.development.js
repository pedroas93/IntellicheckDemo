/**
 * @tanstack/store/src/index.ts
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Store = {}));
})(this, (function (exports) { 'use strict';

  class Store {
    listeners = new Set();
    _batching = false;
    _flushing = 0;
    constructor(initialState, options) {
      this.state = initialState;
      this.options = options;
    }
    subscribe = listener => {
      this.listeners.add(listener);
      const unsub = this.options?.onSubscribe?.(listener, this);
      return () => {
        this.listeners.delete(listener);
        unsub?.();
      };
    };
    setState = updater => {
      const previous = this.state;
      this.state = this.options?.updateFn ? this.options.updateFn(previous)(updater) : updater(previous);

      // Always run onUpdate, regardless of batching
      this.options?.onUpdate?.();

      // Attempt to flush
      this._flush();
    };
    _flush = () => {
      if (this._batching) return;
      const flushId = ++this._flushing;
      this.listeners.forEach(listener => {
        if (this._flushing !== flushId) return;
        listener();
      });
    };
    batch = cb => {
      if (this._batching) return cb();
      this._batching = true;
      cb();
      this._batching = false;
      this._flush();
    };
  }

  exports.Store = Store;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.development.js.map
